Running
Module loaded
Command Line Args: Namespace(config_file='configs/danio2d/video_maskformer2_R50_bs16_8ep.yaml', resume=False, eval_only=False, num_gpus=1, num_machines=1, machine_rank=0, dist_url='tcp://127.0.0.1:51339', opts=['SOLVER.IMS_PER_BATCH', '1'])
[32m[01/25 13:03:48 detectron2]: [0mRank of current process: 0. World size: 1
[32m[01/25 13:03:49 detectron2]: [0mEnvironment info:
----------------------  ----------------------------------------------------------------------------------
sys.platform            linux
Python                  3.9.12 (main, Jun  1 2022, 11:51:15) [GCC 7.3.0]
numpy                   1.26.3
detectron2              0.6 @/home/asravan2/.local/lib/python3.9/site-packages/detectron2
Compiler                GCC 8.5
CUDA compiler           CUDA 11.2
detectron2 arch flags   3.7, 6.0, 7.0, 7.5, 8.0
DETECTRON2_ENV_MODULE   <not set>
PyTorch                 1.10.2 @/opt/miniconda3/envs/opence-v1.6.1/lib/python3.9/site-packages/torch
PyTorch debug build     False
GPU available           Yes
GPU 0                   Tesla V100-SXM2-16GB (arch=7.0)
Driver version          545.23.08
CUDA_HOME               /usr/local/cuda-11.2
TORCH_CUDA_ARCH_LIST    3.7;6.0;7.0;7.5;8.0
Pillow                  8.4.0
torchvision             0.11.3 @/opt/miniconda3/envs/opence-v1.6.1/lib/python3.9/site-packages/torchvision
torchvision arch flags  3.7, 6.0, 7.0, 7.5, 8.0
fvcore                  0.1.5.post20220512
iopath                  0.1.9
cv2                     4.7.0
----------------------  ----------------------------------------------------------------------------------
PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - CPU capability usage: VSX
  - CUDA Runtime 11.2
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80
  - CuDNN 8.1.1
  - Magma 2.6.1
  - Build settings: BLAS_INFO=open, BUILD_TYPE=Release, CUDA_VERSION=11.2, CUDNN_VERSION=8.1.1, CXX_COMPILER=/opt/conda/conda-bld/pytorch-base_1653429086405/_build_env/bin/powerpc64le-conda_cos7-linux-gnu-c++, CXX_FLAGS=-fvisibility-inlines-hidden -fmessage-length=0 -mcpu=power8 -mtune=power8 -mpower8-fusion -mpower8-vector -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O3 -pipe -I/opt/conda/conda-bld/pytorch-base_1653429086405/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_/include -fdebug-prefix-map=/opt/conda/conda-bld/pytorch-base_1653429086405/work=/usr/local/src/conda/pytorch-base-1.10.2 -fdebug-prefix-map=/opt/conda/conda-bld/pytorch-base_1653429086405/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_=/usr/local/src/conda-prefix -D__STDC_FORMAT_MACROS -I/opt/conda/conda-bld/pytorch-base_1653429086405/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_/include -I/usr/local/cuda/include -I/opt/conda/conda-bld/pytorch-base_1653429086405/_build_env/include -Wno-deprecated -fvisibility-inlines-hidden -fopenmp -DNDEBUG -DUSE_KINETO -DLIBKINETO_NOCUPTI -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=open, TORCH_VERSION=1.10.2, USE_CUDA=1, USE_CUDNN=1, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKLDNN=OFF, USE_MPI=0, USE_NCCL=ON, USE_NNPACK=0, USE_OPENMP=1, 

[32m[01/25 13:03:49 detectron2]: [0mCommand line arguments: Namespace(config_file='configs/danio2d/video_maskformer2_R50_bs16_8ep.yaml', resume=False, eval_only=False, num_gpus=1, num_machines=1, machine_rank=0, dist_url='tcp://127.0.0.1:51339', opts=['SOLVER.IMS_PER_BATCH', '1'])
[32m[01/25 13:03:49 detectron2]: [0mContents of args.config_file=configs/danio2d/video_maskformer2_R50_bs16_8ep.yaml:
[38;5;204m_BASE_[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mBase-YouTubeVIS-VideoInstanceSegmentation.yaml[39m
[38;5;204mMODEL[39m[38;5;15m:[39m
[38;5;15m  [39m[38;5;204mWEIGHTS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mmodel_final_3c8ec9.pkl[39m[38;5;186m"[39m
[38;5;15m  [39m[38;5;204mMETA_ARCHITECTURE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mVideoMaskFormer[39m[38;5;186m"[39m
[38;5;15m  [39m[38;5;204mSEM_SEG_HEAD[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;204mNAME[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mMaskFormerHead[39m[38;5;186m"[39m
[38;5;15m    [39m[38;5;204mIGNORE_VALUE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m255[39m
[38;5;15m    [39m[38;5;204mNUM_CLASSES[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1[39m
[38;5;15m    [39m[38;5;204mLOSS_WEIGHT[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1.0[39m
[38;5;15m    [39m[38;5;204mCONVS_DIM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m256[39m
[38;5;15m    [39m[38;5;204mMASK_DIM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m256[39m
[38;5;15m    [39m[38;5;204mNORM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mGN[39m[38;5;186m"[39m
[38;5;15m    [39m[38;5;245m# pixel decoder[39m
[38;5;15m    [39m[38;5;204mPIXEL_DECODER_NAME[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mMSDeformAttnPixelDecoder[39m[38;5;186m"[39m
[38;5;15m    [39m[38;5;204mIN_FEATURES[39m[38;5;15m:[39m[38;5;15m [39m[38;5;15m[[39m[38;5;186m"[39m[38;5;186mres2[39m[38;5;186m"[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mres3[39m[38;5;186m"[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mres4[39m[38;5;186m"[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mres5[39m[38;5;186m"[39m[38;5;15m][39m
[38;5;15m    [39m[38;5;204mDEFORMABLE_TRANSFORMER_ENCODER_IN_FEATURES[39m[38;5;15m:[39m[38;5;15m [39m[38;5;15m[[39m[38;5;186m"[39m[38;5;186mres3[39m[38;5;186m"[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mres4[39m[38;5;186m"[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mres5[39m[38;5;186m"[39m[38;5;15m][39m
[38;5;15m    [39m[38;5;204mCOMMON_STRIDE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m4[39m
[38;5;15m    [39m[38;5;204mTRANSFORMER_ENC_LAYERS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m6[39m
[38;5;15m  [39m[38;5;204mMASK_FORMER[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;204mTRANSFORMER_DECODER_NAME[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mVideoMultiScaleMaskedTransformerDecoder[39m[38;5;186m"[39m
[38;5;15m    [39m[38;5;204mTRANSFORMER_IN_FEATURE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mmulti_scale_pixel_decoder[39m[38;5;186m"[39m
[38;5;15m    [39m[38;5;204mDEEP_SUPERVISION[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mTrue[39m
[38;5;15m    [39m[38;5;204mNO_OBJECT_WEIGHT[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.1[39m
[38;5;15m    [39m[38;5;204mCLASS_WEIGHT[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2.0[39m
[38;5;15m    [39m[38;5;204mMASK_WEIGHT[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m5.0[39m
[38;5;15m    [39m[38;5;204mDICE_WEIGHT[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m5.0[39m
[38;5;15m    [39m[38;5;204mHIDDEN_DIM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m256[39m
[38;5;15m    [39m[38;5;204mNUM_OBJECT_QUERIES[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m100[39m
[38;5;15m    [39m[38;5;204mNHEADS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m8[39m
[38;5;15m    [39m[38;5;204mDROPOUT[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.0[39m
[38;5;15m    [39m[38;5;204mDIM_FEEDFORWARD[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2048[39m
[38;5;15m    [39m[38;5;204mENC_LAYERS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0[39m
[38;5;15m    [39m[38;5;204mPRE_NORM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mFalse[39m
[38;5;15m    [39m[38;5;204mENFORCE_INPUT_PROJ[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mFalse[39m
[38;5;15m    [39m[38;5;204mSIZE_DIVISIBILITY[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m32[39m
[38;5;15m    [39m[38;5;204mDEC_LAYERS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m10[39m[38;5;15m  [39m[38;5;245m# 9 decoder layers, add one for the loss on learnable query[39m
[38;5;15m    [39m[38;5;204mTRAIN_NUM_POINTS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m12544[39m
[38;5;15m    [39m[38;5;204mOVERSAMPLE_RATIO[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m3.0[39m
[38;5;15m    [39m[38;5;204mIMPORTANCE_SAMPLE_RATIO[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.75[39m
[38;5;15m    [39m[38;5;204mTEST[39m[38;5;15m:[39m
[38;5;15m      [39m[38;5;204mSEMANTIC_ON[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mFalse[39m
[38;5;15m      [39m[38;5;204mINSTANCE_ON[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mTrue[39m
[38;5;15m      [39m[38;5;204mPANOPTIC_ON[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mFalse[39m
[38;5;15m      [39m[38;5;204mOVERLAP_THRESHOLD[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.8[39m
[38;5;15m      [39m[38;5;204mOBJECT_MASK_THRESHOLD[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.8[39m

[32m[01/25 13:03:49 detectron2]: [0mRunning with full config:
[38;5;204mCUDNN_BENCHMARK[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;204mDATALOADER[39m[38;5;15m:[39m
[38;5;15m  [39m[38;5;204mASPECT_RATIO_GROUPING[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mtrue[39m
[38;5;15m  [39m[38;5;204mFILTER_EMPTY_ANNOTATIONS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m  [39m[38;5;204mNUM_WORKERS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m4[39m
[38;5;15m  [39m[38;5;204mREPEAT_THRESHOLD[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.0[39m
[38;5;15m  [39m[38;5;204mSAMPLER_TRAIN[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mTrainingSampler[39m
[38;5;204mDATASETS[39m[38;5;15m:[39m
[38;5;15m  [39m[38;5;204mPRECOMPUTED_PROPOSAL_TOPK_TEST[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1000[39m
[38;5;15m  [39m[38;5;204mPRECOMPUTED_PROPOSAL_TOPK_TRAIN[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2000[39m
[38;5;15m  [39m[38;5;204mPROPOSAL_FILES_TEST[39m[38;5;15m:[39m[38;5;15m [39m[38;5;15m[[39m[38;5;15m][39m
[38;5;15m  [39m[38;5;204mPROPOSAL_FILES_TRAIN[39m[38;5;15m:[39m[38;5;15m [39m[38;5;15m[[39m[38;5;15m][39m
[38;5;15m  [39m[38;5;204mTEST[39m[38;5;15m:[39m
[38;5;15m  [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mdanio2d_val[39m
[38;5;15m  [39m[38;5;204mTRAIN[39m[38;5;15m:[39m
[38;5;15m  [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mdanio2d_train[39m
[38;5;204mGLOBAL[39m[38;5;15m:[39m
[38;5;15m  [39m[38;5;204mHACK[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1.0[39m
[38;5;204mINPUT[39m[38;5;15m:[39m
[38;5;15m  [39m[38;5;204mAUGMENTATIONS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;15m[[39m[38;5;15m][39m
[38;5;15m  [39m[38;5;204mCOLOR_AUG_SSD[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m  [39m[38;5;204mCROP[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;204mENABLED[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m    [39m[38;5;204mSINGLE_CATEGORY_MAX_AREA[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1.0[39m
[38;5;15m    [39m[38;5;204mSIZE[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m600[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m720[39m
[38;5;15m    [39m[38;5;204mTYPE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mabsolute_range[39m
[38;5;15m  [39m[38;5;204mDATASET_MAPPER_NAME[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mmask_former_semantic[39m
[38;5;15m  [39m[38;5;204mFORMAT[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mRGB[39m
[38;5;15m  [39m[38;5;204mIMAGE_SIZE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1024[39m
[38;5;15m  [39m[38;5;204mMASK_FORMAT[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mpolygon[39m
[38;5;15m  [39m[38;5;204mMAX_SCALE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2.0[39m
[38;5;15m  [39m[38;5;204mMAX_SIZE_TEST[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1333[39m
[38;5;15m  [39m[38;5;204mMAX_SIZE_TRAIN[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1333[39m
[38;5;15m  [39m[38;5;204mMIN_SCALE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.1[39m
[38;5;15m  [39m[38;5;204mMIN_SIZE_TEST[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m360[39m
[38;5;15m  [39m[38;5;204mMIN_SIZE_TRAIN[39m[38;5;15m:[39m
[38;5;15m  [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m360[39m
[38;5;15m  [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m480[39m
[38;5;15m  [39m[38;5;204mMIN_SIZE_TRAIN_SAMPLING[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mchoice_by_clip[39m
[38;5;15m  [39m[38;5;204mRANDOM_FLIP[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mflip_by_clip[39m
[38;5;15m  [39m[38;5;204mSAMPLING_FRAME_NUM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2[39m
[38;5;15m  [39m[38;5;204mSAMPLING_FRAME_RANGE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m20[39m
[38;5;15m  [39m[38;5;204mSAMPLING_FRAME_SHUFFLE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m  [39m[38;5;204mSIZE_DIVISIBILITY[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m-1[39m
[38;5;204mMODEL[39m[38;5;15m:[39m
[38;5;15m  [39m[38;5;204mANCHOR_GENERATOR[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;204mANGLES[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m-90[39m
[38;5;15m      [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m0[39m
[38;5;15m      [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m90[39m
[38;5;15m    [39m[38;5;204mASPECT_RATIOS[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m0.5[39m
[38;5;15m      [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m1.0[39m
[38;5;15m      [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m2.0[39m
[38;5;15m    [39m[38;5;204mNAME[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mDefaultAnchorGenerator[39m
[38;5;15m    [39m[38;5;204mOFFSET[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.0[39m
[38;5;15m    [39m[38;5;204mSIZES[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m32[39m
[38;5;15m      [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m64[39m
[38;5;15m      [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m128[39m
[38;5;15m      [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m256[39m
[38;5;15m      [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m512[39m
[38;5;15m  [39m[38;5;204mBACKBONE[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;204mFREEZE_AT[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0[39m
[38;5;15m    [39m[38;5;204mNAME[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mbuild_resnet_backbone[39m
[38;5;15m  [39m[38;5;204mDEVICE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mcuda[39m
[38;5;15m  [39m[38;5;204mFPN[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;204mFUSE_TYPE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141msum[39m
[38;5;15m    [39m[38;5;204mIN_FEATURES[39m[38;5;15m:[39m[38;5;15m [39m[38;5;15m[[39m[38;5;15m][39m
[38;5;15m    [39m[38;5;204mNORM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m'[39m
[38;5;15m    [39m[38;5;204mOUT_CHANNELS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m256[39m
[38;5;15m  [39m[38;5;204mKEYPOINT_ON[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m  [39m[38;5;204mLOAD_PROPOSALS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m  [39m[38;5;204mMASK_FORMER[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;204mCLASS_WEIGHT[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2.0[39m
[38;5;15m    [39m[38;5;204mDEC_LAYERS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m10[39m
[38;5;15m    [39m[38;5;204mDEEP_SUPERVISION[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mtrue[39m
[38;5;15m    [39m[38;5;204mDICE_WEIGHT[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m5.0[39m
[38;5;15m    [39m[38;5;204mDIM_FEEDFORWARD[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2048[39m
[38;5;15m    [39m[38;5;204mDROPOUT[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.0[39m
[38;5;15m    [39m[38;5;204mENC_LAYERS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0[39m
[38;5;15m    [39m[38;5;204mENFORCE_INPUT_PROJ[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m    [39m[38;5;204mHIDDEN_DIM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m256[39m
[38;5;15m    [39m[38;5;204mIMPORTANCE_SAMPLE_RATIO[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.75[39m
[38;5;15m    [39m[38;5;204mMASK_WEIGHT[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m5.0[39m
[38;5;15m    [39m[38;5;204mNHEADS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m8[39m
[38;5;15m    [39m[38;5;204mNO_OBJECT_WEIGHT[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.1[39m
[38;5;15m    [39m[38;5;204mNUM_OBJECT_QUERIES[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m100[39m
[38;5;15m    [39m[38;5;204mOVERSAMPLE_RATIO[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m3.0[39m
[38;5;15m    [39m[38;5;204mPRE_NORM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m    [39m[38;5;204mSIZE_DIVISIBILITY[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m32[39m
[38;5;15m    [39m[38;5;204mTEST[39m[38;5;15m:[39m
[38;5;15m      [39m[38;5;204mINSTANCE_ON[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mtrue[39m
[38;5;15m      [39m[38;5;204mOBJECT_MASK_THRESHOLD[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.8[39m
[38;5;15m      [39m[38;5;204mOVERLAP_THRESHOLD[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.8[39m
[38;5;15m      [39m[38;5;204mPANOPTIC_ON[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m      [39m[38;5;204mSEMANTIC_ON[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m      [39m[38;5;204mSEM_SEG_POSTPROCESSING_BEFORE_INFERENCE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m    [39m[38;5;204mTRAIN_NUM_POINTS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m12544[39m
[38;5;15m    [39m[38;5;204mTRANSFORMER_DECODER_NAME[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mVideoMultiScaleMaskedTransformerDecoder[39m
[38;5;15m    [39m[38;5;204mTRANSFORMER_IN_FEATURE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mmulti_scale_pixel_decoder[39m
[38;5;15m  [39m[38;5;204mMASK_ON[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mtrue[39m
[38;5;15m  [39m[38;5;204mMETA_ARCHITECTURE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mVideoMaskFormer[39m
[38;5;15m  [39m[38;5;204mPANOPTIC_FPN[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;204mCOMBINE[39m[38;5;15m:[39m
[38;5;15m      [39m[38;5;204mENABLED[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mtrue[39m
[38;5;15m      [39m[38;5;204mINSTANCES_CONFIDENCE_THRESH[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.5[39m
[38;5;15m      [39m[38;5;204mOVERLAP_THRESH[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.5[39m
[38;5;15m      [39m[38;5;204mSTUFF_AREA_LIMIT[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m4096[39m
[38;5;15m    [39m[38;5;204mINSTANCE_LOSS_WEIGHT[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1.0[39m
[38;5;15m  [39m[38;5;204mPIXEL_MEAN[39m[38;5;15m:[39m
[38;5;15m  [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m123.675[39m
[38;5;15m  [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m116.28[39m
[38;5;15m  [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m103.53[39m
[38;5;15m  [39m[38;5;204mPIXEL_STD[39m[38;5;15m:[39m
[38;5;15m  [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m58.395[39m
[38;5;15m  [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m57.12[39m
[38;5;15m  [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m57.375[39m
[38;5;15m  [39m[38;5;204mPROPOSAL_GENERATOR[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;204mMIN_SIZE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0[39m
[38;5;15m    [39m[38;5;204mNAME[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mRPN[39m
[38;5;15m  [39m[38;5;204mRESNETS[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;204mDEFORM_MODULATED[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m    [39m[38;5;204mDEFORM_NUM_GROUPS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1[39m
[38;5;15m    [39m[38;5;204mDEFORM_ON_PER_STAGE[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m    [39m[38;5;204mDEPTH[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m50[39m
[38;5;15m    [39m[38;5;204mNORM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mFrozenBN[39m
[38;5;15m    [39m[38;5;204mNUM_GROUPS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1[39m
[38;5;15m    [39m[38;5;204mOUT_FEATURES[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mres2[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mres3[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mres4[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mres5[39m
[38;5;15m    [39m[38;5;204mRES2_OUT_CHANNELS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m256[39m
[38;5;15m    [39m[38;5;204mRES4_DILATION[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1[39m
[38;5;15m    [39m[38;5;204mRES5_DILATION[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1[39m
[38;5;15m    [39m[38;5;204mRES5_MULTI_GRID[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m1[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m1[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m1[39m
[38;5;15m    [39m[38;5;204mSTEM_OUT_CHANNELS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m64[39m
[38;5;15m    [39m[38;5;204mSTEM_TYPE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mbasic[39m
[38;5;15m    [39m[38;5;204mSTRIDE_IN_1X1[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m    [39m[38;5;204mWIDTH_PER_GROUP[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m64[39m
[38;5;15m  [39m[38;5;204mRETINANET[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;204mBBOX_REG_LOSS_TYPE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141msmooth_l1[39m
[38;5;15m    [39m[38;5;204mBBOX_REG_WEIGHTS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;15m&id002[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m1.0[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m1.0[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m1.0[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m1.0[39m
[38;5;15m    [39m[38;5;204mFOCAL_LOSS_ALPHA[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.25[39m
[38;5;15m    [39m[38;5;204mFOCAL_LOSS_GAMMA[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2.0[39m
[38;5;15m    [39m[38;5;204mIN_FEATURES[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mp3[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mp4[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mp5[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mp6[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mp7[39m
[38;5;15m    [39m[38;5;204mIOU_LABELS[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m0[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m-1[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m1[39m
[38;5;15m    [39m[38;5;204mIOU_THRESHOLDS[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m0.4[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m0.5[39m
[38;5;15m    [39m[38;5;204mNMS_THRESH_TEST[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.5[39m
[38;5;15m    [39m[38;5;204mNORM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m'[39m
[38;5;15m    [39m[38;5;204mNUM_CLASSES[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m80[39m
[38;5;15m    [39m[38;5;204mNUM_CONVS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m4[39m
[38;5;15m    [39m[38;5;204mPRIOR_PROB[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.01[39m
[38;5;15m    [39m[38;5;204mSCORE_THRESH_TEST[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.05[39m
[38;5;15m    [39m[38;5;204mSMOOTH_L1_LOSS_BETA[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.1[39m
[38;5;15m    [39m[38;5;204mTOPK_CANDIDATES_TEST[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1000[39m
[38;5;15m  [39m[38;5;204mROI_BOX_CASCADE_HEAD[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;204mBBOX_REG_WEIGHTS[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;15m&id001[39m
[38;5;15m      [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m10.0[39m
[38;5;15m      [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m10.0[39m
[38;5;15m      [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m5.0[39m
[38;5;15m      [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m5.0[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m20.0[39m
[38;5;15m      [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m20.0[39m
[38;5;15m      [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m10.0[39m
[38;5;15m      [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m10.0[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m30.0[39m
[38;5;15m      [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m30.0[39m
[38;5;15m      [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m15.0[39m
[38;5;15m      [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m15.0[39m
[38;5;15m    [39m[38;5;204mIOUS[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m0.5[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m0.6[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m0.7[39m
[38;5;15m  [39m[38;5;204mROI_BOX_HEAD[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;204mBBOX_REG_LOSS_TYPE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141msmooth_l1[39m
[38;5;15m    [39m[38;5;204mBBOX_REG_LOSS_WEIGHT[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1.0[39m
[38;5;15m    [39m[38;5;204mBBOX_REG_WEIGHTS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;15m*id001[39m
[38;5;15m    [39m[38;5;204mCLS_AGNOSTIC_BBOX_REG[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m    [39m[38;5;204mCONV_DIM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m256[39m
[38;5;15m    [39m[38;5;204mFC_DIM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1024[39m
[38;5;15m    [39m[38;5;204mFED_LOSS_FREQ_WEIGHT_POWER[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.5[39m
[38;5;15m    [39m[38;5;204mFED_LOSS_NUM_CLASSES[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m50[39m
[38;5;15m    [39m[38;5;204mNAME[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m'[39m
[38;5;15m    [39m[38;5;204mNORM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m'[39m
[38;5;15m    [39m[38;5;204mNUM_CONV[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0[39m
[38;5;15m    [39m[38;5;204mNUM_FC[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0[39m
[38;5;15m    [39m[38;5;204mPOOLER_RESOLUTION[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m14[39m
[38;5;15m    [39m[38;5;204mPOOLER_SAMPLING_RATIO[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0[39m
[38;5;15m    [39m[38;5;204mPOOLER_TYPE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mROIAlignV2[39m
[38;5;15m    [39m[38;5;204mSMOOTH_L1_BETA[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.0[39m
[38;5;15m    [39m[38;5;204mTRAIN_ON_PRED_BOXES[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m    [39m[38;5;204mUSE_FED_LOSS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m    [39m[38;5;204mUSE_SIGMOID_CE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m  [39m[38;5;204mROI_HEADS[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;204mBATCH_SIZE_PER_IMAGE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m512[39m
[38;5;15m    [39m[38;5;204mIN_FEATURES[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mres4[39m
[38;5;15m    [39m[38;5;204mIOU_LABELS[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m0[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m1[39m
[38;5;15m    [39m[38;5;204mIOU_THRESHOLDS[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m0.5[39m
[38;5;15m    [39m[38;5;204mNAME[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mRes5ROIHeads[39m
[38;5;15m    [39m[38;5;204mNMS_THRESH_TEST[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.5[39m
[38;5;15m    [39m[38;5;204mNUM_CLASSES[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m80[39m
[38;5;15m    [39m[38;5;204mPOSITIVE_FRACTION[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.25[39m
[38;5;15m    [39m[38;5;204mPROPOSAL_APPEND_GT[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mtrue[39m
[38;5;15m    [39m[38;5;204mSCORE_THRESH_TEST[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.05[39m
[38;5;15m  [39m[38;5;204mROI_KEYPOINT_HEAD[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;204mCONV_DIMS[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m512[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m512[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m512[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m512[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m512[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m512[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m512[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m512[39m
[38;5;15m    [39m[38;5;204mLOSS_WEIGHT[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1.0[39m
[38;5;15m    [39m[38;5;204mMIN_KEYPOINTS_PER_IMAGE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1[39m
[38;5;15m    [39m[38;5;204mNAME[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mKRCNNConvDeconvUpsampleHead[39m
[38;5;15m    [39m[38;5;204mNORMALIZE_LOSS_BY_VISIBLE_KEYPOINTS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mtrue[39m
[38;5;15m    [39m[38;5;204mNUM_KEYPOINTS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m17[39m
[38;5;15m    [39m[38;5;204mPOOLER_RESOLUTION[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m14[39m
[38;5;15m    [39m[38;5;204mPOOLER_SAMPLING_RATIO[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0[39m
[38;5;15m    [39m[38;5;204mPOOLER_TYPE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mROIAlignV2[39m
[38;5;15m  [39m[38;5;204mROI_MASK_HEAD[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;204mCLS_AGNOSTIC_MASK[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m    [39m[38;5;204mCONV_DIM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m256[39m
[38;5;15m    [39m[38;5;204mNAME[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mMaskRCNNConvUpsampleHead[39m
[38;5;15m    [39m[38;5;204mNORM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m'[39m
[38;5;15m    [39m[38;5;204mNUM_CONV[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0[39m
[38;5;15m    [39m[38;5;204mPOOLER_RESOLUTION[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m14[39m
[38;5;15m    [39m[38;5;204mPOOLER_SAMPLING_RATIO[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0[39m
[38;5;15m    [39m[38;5;204mPOOLER_TYPE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mROIAlignV2[39m
[38;5;15m  [39m[38;5;204mRPN[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;204mBATCH_SIZE_PER_IMAGE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m256[39m
[38;5;15m    [39m[38;5;204mBBOX_REG_LOSS_TYPE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141msmooth_l1[39m
[38;5;15m    [39m[38;5;204mBBOX_REG_LOSS_WEIGHT[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1.0[39m
[38;5;15m    [39m[38;5;204mBBOX_REG_WEIGHTS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;15m*id002[39m
[38;5;15m    [39m[38;5;204mBOUNDARY_THRESH[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m-1[39m
[38;5;15m    [39m[38;5;204mCONV_DIMS[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m-1[39m
[38;5;15m    [39m[38;5;204mHEAD_NAME[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mStandardRPNHead[39m
[38;5;15m    [39m[38;5;204mIN_FEATURES[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mres4[39m
[38;5;15m    [39m[38;5;204mIOU_LABELS[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m0[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m-1[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m1[39m
[38;5;15m    [39m[38;5;204mIOU_THRESHOLDS[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m0.3[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m0.7[39m
[38;5;15m    [39m[38;5;204mLOSS_WEIGHT[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1.0[39m
[38;5;15m    [39m[38;5;204mNMS_THRESH[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.7[39m
[38;5;15m    [39m[38;5;204mPOSITIVE_FRACTION[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.5[39m
[38;5;15m    [39m[38;5;204mPOST_NMS_TOPK_TEST[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1000[39m
[38;5;15m    [39m[38;5;204mPOST_NMS_TOPK_TRAIN[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2000[39m
[38;5;15m    [39m[38;5;204mPRE_NMS_TOPK_TEST[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m6000[39m
[38;5;15m    [39m[38;5;204mPRE_NMS_TOPK_TRAIN[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m12000[39m
[38;5;15m    [39m[38;5;204mSMOOTH_L1_BETA[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.0[39m
[38;5;15m  [39m[38;5;204mSEM_SEG_HEAD[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;204mASPP_CHANNELS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m256[39m
[38;5;15m    [39m[38;5;204mASPP_DILATIONS[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m6[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m12[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m18[39m
[38;5;15m    [39m[38;5;204mASPP_DROPOUT[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.1[39m
[38;5;15m    [39m[38;5;204mCOMMON_STRIDE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m4[39m
[38;5;15m    [39m[38;5;204mCONVS_DIM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m256[39m
[38;5;15m    [39m[38;5;204mDEFORMABLE_TRANSFORMER_ENCODER_IN_FEATURES[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mres3[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mres4[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mres5[39m
[38;5;15m    [39m[38;5;204mDEFORMABLE_TRANSFORMER_ENCODER_N_HEADS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m8[39m
[38;5;15m    [39m[38;5;204mDEFORMABLE_TRANSFORMER_ENCODER_N_POINTS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m4[39m
[38;5;15m    [39m[38;5;204mIGNORE_VALUE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m255[39m
[38;5;15m    [39m[38;5;204mIN_FEATURES[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mres2[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mres3[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mres4[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mres5[39m
[38;5;15m    [39m[38;5;204mLOSS_TYPE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mhard_pixel_mining[39m
[38;5;15m    [39m[38;5;204mLOSS_WEIGHT[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1.0[39m
[38;5;15m    [39m[38;5;204mMASK_DIM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m256[39m
[38;5;15m    [39m[38;5;204mNAME[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mMaskFormerHead[39m
[38;5;15m    [39m[38;5;204mNORM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mGN[39m
[38;5;15m    [39m[38;5;204mNUM_CLASSES[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1[39m
[38;5;15m    [39m[38;5;204mPIXEL_DECODER_NAME[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mMSDeformAttnPixelDecoder[39m
[38;5;15m    [39m[38;5;204mPROJECT_CHANNELS[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m48[39m
[38;5;15m    [39m[38;5;204mPROJECT_FEATURES[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mres2[39m
[38;5;15m    [39m[38;5;204mTRANSFORMER_ENC_LAYERS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m6[39m
[38;5;15m    [39m[38;5;204mUSE_DEPTHWISE_SEPARABLE_CONV[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m  [39m[38;5;204mSWIN[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;204mAPE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m    [39m[38;5;204mATTN_DROP_RATE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.0[39m
[38;5;15m    [39m[38;5;204mDEPTHS[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m2[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m2[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m6[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m2[39m
[38;5;15m    [39m[38;5;204mDROP_PATH_RATE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.3[39m
[38;5;15m    [39m[38;5;204mDROP_RATE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.0[39m
[38;5;15m    [39m[38;5;204mEMBED_DIM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m96[39m
[38;5;15m    [39m[38;5;204mMLP_RATIO[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m4.0[39m
[38;5;15m    [39m[38;5;204mNUM_HEADS[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m3[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m6[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m12[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m24[39m
[38;5;15m    [39m[38;5;204mOUT_FEATURES[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mres2[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mres3[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mres4[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mres5[39m
[38;5;15m    [39m[38;5;204mPATCH_NORM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mtrue[39m
[38;5;15m    [39m[38;5;204mPATCH_SIZE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m4[39m
[38;5;15m    [39m[38;5;204mPRETRAIN_IMG_SIZE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m224[39m
[38;5;15m    [39m[38;5;204mQKV_BIAS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mtrue[39m
[38;5;15m    [39m[38;5;204mQK_SCALE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mnull[39m
[38;5;15m    [39m[38;5;204mUSE_CHECKPOINT[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m    [39m[38;5;204mWINDOW_SIZE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m7[39m
[38;5;15m  [39m[38;5;204mWEIGHTS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mmodel_final_3c8ec9.pkl[39m
[38;5;204mOUTPUT_DIR[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m./output[39m
[38;5;204mSEED[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m-1[39m
[38;5;204mSOLVER[39m[38;5;15m:[39m
[38;5;15m  [39m[38;5;204mAMP[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;204mENABLED[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mtrue[39m
[38;5;15m  [39m[38;5;204mBACKBONE_MULTIPLIER[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.1[39m
[38;5;15m  [39m[38;5;204mBASE_LR[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.0001[39m
[38;5;15m  [39m[38;5;204mBASE_LR_END[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.0[39m
[38;5;15m  [39m[38;5;204mBIAS_LR_FACTOR[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1.0[39m
[38;5;15m  [39m[38;5;204mCHECKPOINT_PERIOD[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m5000[39m
[38;5;15m  [39m[38;5;204mCLIP_GRADIENTS[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;204mCLIP_TYPE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfull_model[39m
[38;5;15m    [39m[38;5;204mCLIP_VALUE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.01[39m
[38;5;15m    [39m[38;5;204mENABLED[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mtrue[39m
[38;5;15m    [39m[38;5;204mNORM_TYPE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2.0[39m
[38;5;15m  [39m[38;5;204mGAMMA[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.1[39m
[38;5;15m  [39m[38;5;204mIMS_PER_BATCH[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1[39m
[38;5;15m  [39m[38;5;204mLR_SCHEDULER_NAME[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mWarmupMultiStepLR[39m
[38;5;15m  [39m[38;5;204mMAX_ITER[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m6000[39m
[38;5;15m  [39m[38;5;204mMOMENTUM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.9[39m
[38;5;15m  [39m[38;5;204mNESTEROV[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m  [39m[38;5;204mOPTIMIZER[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mADAMW[39m
[38;5;15m  [39m[38;5;204mPOLY_LR_CONSTANT_ENDING[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.0[39m
[38;5;15m  [39m[38;5;204mPOLY_LR_POWER[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.9[39m
[38;5;15m  [39m[38;5;204mREFERENCE_WORLD_SIZE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0[39m
[38;5;15m  [39m[38;5;204mSTEPS[39m[38;5;15m:[39m
[38;5;15m  [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m4000[39m
[38;5;15m  [39m[38;5;204mWARMUP_FACTOR[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1.0[39m
[38;5;15m  [39m[38;5;204mWARMUP_ITERS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m10[39m
[38;5;15m  [39m[38;5;204mWARMUP_METHOD[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mlinear[39m
[38;5;15m  [39m[38;5;204mWEIGHT_DECAY[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.05[39m
[38;5;15m  [39m[38;5;204mWEIGHT_DECAY_BIAS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mnull[39m
[38;5;15m  [39m[38;5;204mWEIGHT_DECAY_EMBED[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.0[39m
[38;5;15m  [39m[38;5;204mWEIGHT_DECAY_NORM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.0[39m
[38;5;204mTEST[39m[38;5;15m:[39m
[38;5;15m  [39m[38;5;204mAUG[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;204mENABLED[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m    [39m[38;5;204mFLIP[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mtrue[39m
[38;5;15m    [39m[38;5;204mMAX_SIZE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m4000[39m
[38;5;15m    [39m[38;5;204mMIN_SIZES[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m400[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m500[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m600[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m700[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m800[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m900[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m1000[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m1100[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m1200[39m
[38;5;15m  [39m[38;5;204mDETECTIONS_PER_IMAGE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m100[39m
[38;5;15m  [39m[38;5;204mEVAL_PERIOD[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0[39m
[38;5;15m  [39m[38;5;204mEXPECTED_RESULTS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;15m[[39m[38;5;15m][39m
[38;5;15m  [39m[38;5;204mKEYPOINT_OKS_SIGMAS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;15m[[39m[38;5;15m][39m
[38;5;15m  [39m[38;5;204mPRECISE_BN[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;204mENABLED[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m    [39m[38;5;204mNUM_ITER[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m200[39m
[38;5;204mVERSION[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2[39m
[38;5;204mVIS_PERIOD[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0[39m

[32m[01/25 13:03:49 detectron2]: [0mFull config saved to ./output/config.yaml
[32m[01/25 13:03:49 d2.utils.env]: [0mUsing a generated random seed 51432451
[32m[01/25 13:03:52 d2.engine.defaults]: [0mModel:
VideoMaskFormer(
  (backbone): ResNet(
    (stem): BasicStem(
      (conv1): Conv2d(
        3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False
        (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
      )
    )
    (res2): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
        )
        (conv1): Conv2d(
          64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
        )
        (conv2): Conv2d(
          64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
        )
        (conv3): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
        )
        (conv2): Conv2d(
          64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
        )
        (conv3): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
        )
        (conv2): Conv2d(
          64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
        )
        (conv3): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
        )
      )
    )
    (res3): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
          (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
        )
        (conv1): Conv2d(
          256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
        )
      )
      (3): BottleneckBlock(
        (conv1): Conv2d(
          512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
        )
      )
    )
    (res4): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False
          (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
        )
        (conv1): Conv2d(
          512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
        )
      )
      (3): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
        )
      )
      (4): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
        )
      )
      (5): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
        )
      )
    )
    (res5): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False
          (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
        )
        (conv1): Conv2d(
          1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
        )
        (conv2): Conv2d(
          512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
        )
        (conv3): Conv2d(
          512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
        )
        (conv2): Conv2d(
          512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
        )
        (conv3): Conv2d(
          512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
        )
        (conv2): Conv2d(
          512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
        )
        (conv3): Conv2d(
          512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
        )
      )
    )
  )
  (sem_seg_head): MaskFormerHead(
    (pixel_decoder): MSDeformAttnPixelDecoder(
      (input_proj): ModuleList(
        (0): Sequential(
          (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
        (1): Sequential(
          (0): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
        (2): Sequential(
          (0): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
      )
      (transformer): MSDeformAttnTransformerEncoderOnly(
        (encoder): MSDeformAttnTransformerEncoder(
          (layers): ModuleList(
            (0): MSDeformAttnTransformerEncoderLayer(
              (self_attn): MSDeformAttn(
                (sampling_offsets): Linear(in_features=256, out_features=192, bias=True)
                (attention_weights): Linear(in_features=256, out_features=96, bias=True)
                (value_proj): Linear(in_features=256, out_features=256, bias=True)
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
              )
              (dropout1): Dropout(p=0.0, inplace=False)
              (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (linear1): Linear(in_features=256, out_features=1024, bias=True)
              (dropout2): Dropout(p=0.0, inplace=False)
              (linear2): Linear(in_features=1024, out_features=256, bias=True)
              (dropout3): Dropout(p=0.0, inplace=False)
              (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
            (1): MSDeformAttnTransformerEncoderLayer(
              (self_attn): MSDeformAttn(
                (sampling_offsets): Linear(in_features=256, out_features=192, bias=True)
                (attention_weights): Linear(in_features=256, out_features=96, bias=True)
                (value_proj): Linear(in_features=256, out_features=256, bias=True)
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
              )
              (dropout1): Dropout(p=0.0, inplace=False)
              (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (linear1): Linear(in_features=256, out_features=1024, bias=True)
              (dropout2): Dropout(p=0.0, inplace=False)
              (linear2): Linear(in_features=1024, out_features=256, bias=True)
              (dropout3): Dropout(p=0.0, inplace=False)
              (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
            (2): MSDeformAttnTransformerEncoderLayer(
              (self_attn): MSDeformAttn(
                (sampling_offsets): Linear(in_features=256, out_features=192, bias=True)
                (attention_weights): Linear(in_features=256, out_features=96, bias=True)
                (value_proj): Linear(in_features=256, out_features=256, bias=True)
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
              )
              (dropout1): Dropout(p=0.0, inplace=False)
              (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (linear1): Linear(in_features=256, out_features=1024, bias=True)
              (dropout2): Dropout(p=0.0, inplace=False)
              (linear2): Linear(in_features=1024, out_features=256, bias=True)
              (dropout3): Dropout(p=0.0, inplace=False)
              (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
            (3): MSDeformAttnTransformerEncoderLayer(
              (self_attn): MSDeformAttn(
                (sampling_offsets): Linear(in_features=256, out_features=192, bias=True)
                (attention_weights): Linear(in_features=256, out_features=96, bias=True)
                (value_proj): Linear(in_features=256, out_features=256, bias=True)
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
              )
              (dropout1): Dropout(p=0.0, inplace=False)
              (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (linear1): Linear(in_features=256, out_features=1024, bias=True)
              (dropout2): Dropout(p=0.0, inplace=False)
              (linear2): Linear(in_features=1024, out_features=256, bias=True)
              (dropout3): Dropout(p=0.0, inplace=False)
              (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
            (4): MSDeformAttnTransformerEncoderLayer(
              (self_attn): MSDeformAttn(
                (sampling_offsets): Linear(in_features=256, out_features=192, bias=True)
                (attention_weights): Linear(in_features=256, out_features=96, bias=True)
                (value_proj): Linear(in_features=256, out_features=256, bias=True)
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
              )
              (dropout1): Dropout(p=0.0, inplace=False)
              (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (linear1): Linear(in_features=256, out_features=1024, bias=True)
              (dropout2): Dropout(p=0.0, inplace=False)
              (linear2): Linear(in_features=1024, out_features=256, bias=True)
              (dropout3): Dropout(p=0.0, inplace=False)
              (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
            (5): MSDeformAttnTransformerEncoderLayer(
              (self_attn): MSDeformAttn(
                (sampling_offsets): Linear(in_features=256, out_features=192, bias=True)
                (attention_weights): Linear(in_features=256, out_features=96, bias=True)
                (value_proj): Linear(in_features=256, out_features=256, bias=True)
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
              )
              (dropout1): Dropout(p=0.0, inplace=False)
              (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (linear1): Linear(in_features=256, out_features=1024, bias=True)
              (dropout2): Dropout(p=0.0, inplace=False)
              (linear2): Linear(in_features=1024, out_features=256, bias=True)
              (dropout3): Dropout(p=0.0, inplace=False)
              (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
          )
        )
      )
      (pe_layer): Positional encoding PositionEmbeddingSine
          num_pos_feats: 128
          temperature: 10000
          normalize: True
          scale: 6.283185307179586
      (mask_features): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
      (adapter_1): Conv2d(
        256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
        (norm): GroupNorm(32, 256, eps=1e-05, affine=True)
      )
      (layer_1): Conv2d(
        256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
        (norm): GroupNorm(32, 256, eps=1e-05, affine=True)
      )
    )
    (predictor): VideoMultiScaleMaskedTransformerDecoder(
      (pe_layer): PositionEmbeddingSine3D()
      (transformer_self_attention_layers): ModuleList(
        (0): SelfAttentionLayer(
          (self_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (1): SelfAttentionLayer(
          (self_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (2): SelfAttentionLayer(
          (self_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (3): SelfAttentionLayer(
          (self_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (4): SelfAttentionLayer(
          (self_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (5): SelfAttentionLayer(
          (self_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (6): SelfAttentionLayer(
          (self_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (7): SelfAttentionLayer(
          (self_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (8): SelfAttentionLayer(
          (self_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
      )
      (transformer_cross_attention_layers): ModuleList(
        (0): CrossAttentionLayer(
          (multihead_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (1): CrossAttentionLayer(
          (multihead_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (2): CrossAttentionLayer(
          (multihead_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (3): CrossAttentionLayer(
          (multihead_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (4): CrossAttentionLayer(
          (multihead_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (5): CrossAttentionLayer(
          (multihead_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (6): CrossAttentionLayer(
          (multihead_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (7): CrossAttentionLayer(
          (multihead_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (8): CrossAttentionLayer(
          (multihead_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
      )
      (transformer_ffn_layers): ModuleList(
        (0): FFNLayer(
          (linear1): Linear(in_features=256, out_features=2048, bias=True)
          (dropout): Dropout(p=0.0, inplace=False)
          (linear2): Linear(in_features=2048, out_features=256, bias=True)
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        )
        (1): FFNLayer(
          (linear1): Linear(in_features=256, out_features=2048, bias=True)
          (dropout): Dropout(p=0.0, inplace=False)
          (linear2): Linear(in_features=2048, out_features=256, bias=True)
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        )
        (2): FFNLayer(
          (linear1): Linear(in_features=256, out_features=2048, bias=True)
          (dropout): Dropout(p=0.0, inplace=False)
          (linear2): Linear(in_features=2048, out_features=256, bias=True)
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        )
        (3): FFNLayer(
          (linear1): Linear(in_features=256, out_features=2048, bias=True)
          (dropout): Dropout(p=0.0, inplace=False)
          (linear2): Linear(in_features=2048, out_features=256, bias=True)
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        )
        (4): FFNLayer(
          (linear1): Linear(in_features=256, out_features=2048, bias=True)
          (dropout): Dropout(p=0.0, inplace=False)
          (linear2): Linear(in_features=2048, out_features=256, bias=True)
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        )
        (5): FFNLayer(
          (linear1): Linear(in_features=256, out_features=2048, bias=True)
          (dropout): Dropout(p=0.0, inplace=False)
          (linear2): Linear(in_features=2048, out_features=256, bias=True)
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        )
        (6): FFNLayer(
          (linear1): Linear(in_features=256, out_features=2048, bias=True)
          (dropout): Dropout(p=0.0, inplace=False)
          (linear2): Linear(in_features=2048, out_features=256, bias=True)
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        )
        (7): FFNLayer(
          (linear1): Linear(in_features=256, out_features=2048, bias=True)
          (dropout): Dropout(p=0.0, inplace=False)
          (linear2): Linear(in_features=2048, out_features=256, bias=True)
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        )
        (8): FFNLayer(
          (linear1): Linear(in_features=256, out_features=2048, bias=True)
          (dropout): Dropout(p=0.0, inplace=False)
          (linear2): Linear(in_features=2048, out_features=256, bias=True)
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        )
      )
      (decoder_norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
      (query_feat): Embedding(100, 256)
      (query_embed): Embedding(100, 256)
      (level_embed): Embedding(3, 256)
      (input_proj): ModuleList(
        (0): Sequential()
        (1): Sequential()
        (2): Sequential()
      )
      (class_embed): Linear(in_features=256, out_features=2, bias=True)
      (mask_embed): MLP(
        (layers): ModuleList(
          (0): Linear(in_features=256, out_features=256, bias=True)
          (1): Linear(in_features=256, out_features=256, bias=True)
          (2): Linear(in_features=256, out_features=256, bias=True)
        )
      )
    )
  )
  (criterion): Criterion VideoSetCriterion
      matcher: Matcher VideoHungarianMatcher
          cost_class: 2.0
          cost_mask: 5.0
          cost_dice: 5.0
      losses: ['labels', 'masks']
      weight_dict: {'loss_ce': 2.0, 'loss_mask': 5.0, 'loss_dice': 5.0, 'loss_ce_0': 2.0, 'loss_mask_0': 5.0, 'loss_dice_0': 5.0, 'loss_ce_1': 2.0, 'loss_mask_1': 5.0, 'loss_dice_1': 5.0, 'loss_ce_2': 2.0, 'loss_mask_2': 5.0, 'loss_dice_2': 5.0, 'loss_ce_3': 2.0, 'loss_mask_3': 5.0, 'loss_dice_3': 5.0, 'loss_ce_4': 2.0, 'loss_mask_4': 5.0, 'loss_dice_4': 5.0, 'loss_ce_5': 2.0, 'loss_mask_5': 5.0, 'loss_dice_5': 5.0, 'loss_ce_6': 2.0, 'loss_mask_6': 5.0, 'loss_dice_6': 5.0, 'loss_ce_7': 2.0, 'loss_mask_7': 5.0, 'loss_dice_7': 5.0, 'loss_ce_8': 2.0, 'loss_mask_8': 5.0, 'loss_dice_8': 5.0}
      num_classes: 1
      eos_coef: 0.1
      num_points: 12544
      oversample_ratio: 3.0
      importance_sample_ratio: 0.75
)
[32m[01/25 13:03:52 mask2former_video.data_video.dataset_mapper]: [0m[DatasetMapper] Augmentations used in training: [ResizeShortestEdge(short_edge_length=(360, 480), max_size=1333, sample_style='choice_by_clip', clip_frame_cnt=2), RandomFlip(clip_frame_cnt=2)]
[32m[01/25 13:03:52 mask2former_video.data_video.datasets.ytvis]: [0mLoaded 1 videos in YTVIS format from datasets/danio2d_small/train.json
[32m[01/25 13:03:52 mask2former_video.data_video.build]: [0mUsing training sampler TrainingSampler
[32m[01/25 13:03:52 d2.data.common]: [0mSerializing 1 elements to byte tensors and concatenating them all ...
[32m[01/25 13:03:52 d2.data.common]: [0mSerialized dataset takes 0.04 MiB
[32m[01/25 13:03:54 d2.engine.train_loop]: [0mStarting training from iteration 0
[32m[01/25 13:04:03 d2.utils.events]: [0m eta: 0:26:44  iter: 19  total_loss: 106.6  loss_ce: 0.722  loss_mask: 0.2675  loss_dice: 9.773  loss_ce_0: 1.154  loss_mask_0: 0.2029  loss_dice_0: 9.846  loss_ce_1: 0.5614  loss_mask_1: 0.3012  loss_dice_1: 9.884  loss_ce_2: 0.5024  loss_mask_2: 0.232  loss_dice_2: 9.831  loss_ce_3: 0.5483  loss_mask_3: 0.2615  loss_dice_3: 9.784  loss_ce_4: 0.6054  loss_mask_4: 0.2445  loss_dice_4: 9.8  loss_ce_5: 0.6224  loss_mask_5: 0.2629  loss_dice_5: 9.763  loss_ce_6: 0.639  loss_mask_6: 0.2734  loss_dice_6: 9.757  loss_ce_7: 0.6456  loss_mask_7: 0.2977  loss_dice_7: 9.729  loss_ce_8: 0.6856  loss_mask_8: 0.2668  loss_dice_8: 9.811  time: 0.2533  data_time: 0.0226  lr: 0.0001  max_mem: 2369M
[32m[01/25 13:04:08 d2.utils.events]: [0m eta: 0:25:37  iter: 39  total_loss: 79.6  loss_ce: 0.6329  loss_mask: 0.1256  loss_dice: 7.15  loss_ce_0: 1.127  loss_mask_0: 0.1109  loss_dice_0: 7.227  loss_ce_1: 0.08964  loss_mask_1: 0.1346  loss_dice_1: 7.48  loss_ce_2: 0.02431  loss_mask_2: 0.1543  loss_dice_2: 7.183  loss_ce_3: 0.04275  loss_mask_3: 0.1688  loss_dice_3: 7.275  loss_ce_4: 0.1405  loss_mask_4: 0.1545  loss_dice_4: 8.016  loss_ce_5: 0.2942  loss_mask_5: 0.1446  loss_dice_5: 7.76  loss_ce_6: 0.4879  loss_mask_6: 0.1346  loss_dice_6: 7.971  loss_ce_7: 0.5834  loss_mask_7: 0.1519  loss_dice_7: 8.03  loss_ce_8: 0.6142  loss_mask_8: 0.1484  loss_dice_8: 7.512  time: 0.2588  data_time: 0.0063  lr: 0.0001  max_mem: 2369M
[32m[01/25 13:04:13 d2.utils.events]: [0m eta: 0:25:27  iter: 59  total_loss: 48.33  loss_ce: 0.6  loss_mask: 0.1249  loss_dice: 4.455  loss_ce_0: 1.113  loss_mask_0: 0.1033  loss_dice_0: 4.471  loss_ce_1: 0.0389  loss_mask_1: 0.1453  loss_dice_1: 4.548  loss_ce_2: 0.01034  loss_mask_2: 0.1495  loss_dice_2: 4.518  loss_ce_3: 0.00894  loss_mask_3: 0.1452  loss_dice_3: 4.503  loss_ce_4: 0.02552  loss_mask_4: 0.1334  loss_dice_4: 4.189  loss_ce_5: 0.07996  loss_mask_5: 0.1523  loss_dice_5: 4.378  loss_ce_6: 0.2965  loss_mask_6: 0.1111  loss_dice_6: 4.372  loss_ce_7: 0.486  loss_mask_7: 0.1192  loss_dice_7: 4.245  loss_ce_8: 0.5695  loss_mask_8: 0.1297  loss_dice_8: 4.504  time: 0.2597  data_time: 0.0053  lr: 0.0001  max_mem: 2369M
[32m[01/25 13:04:19 d2.utils.events]: [0m eta: 0:26:48  iter: 79  total_loss: 31.3  loss_ce: 0.5469  loss_mask: 0.05633  loss_dice: 2.682  loss_ce_0: 1.106  loss_mask_0: 0.04363  loss_dice_0: 2.987  loss_ce_1: 0.02712  loss_mask_1: 0.05766  loss_dice_1: 3.039  loss_ce_2: 0.004624  loss_mask_2: 0.05645  loss_dice_2: 2.982  loss_ce_3: 0.002975  loss_mask_3: 0.05951  loss_dice_3: 2.804  loss_ce_4: 0.004263  loss_mask_4: 0.0639  loss_dice_4: 3.166  loss_ce_5: 0.005667  loss_mask_5: 0.06306  loss_dice_5: 2.926  loss_ce_6: 0.03104  loss_mask_6: 0.06124  loss_dice_6: 2.835  loss_ce_7: 0.1748  loss_mask_7: 0.05635  loss_dice_7: 2.85  loss_ce_8: 0.4114  loss_mask_8: 0.05969  loss_dice_8: 2.914  time: 0.2623  data_time: 0.0046  lr: 0.0001  max_mem: 2369M
[32m[01/25 13:04:24 d2.utils.events]: [0m eta: 0:26:43  iter: 99  total_loss: 30.25  loss_ce: 0.3671  loss_mask: 0.04637  loss_dice: 2.634  loss_ce_0: 1.099  loss_mask_0: 0.03852  loss_dice_0: 2.919  loss_ce_1: 0.02341  loss_mask_1: 0.0483  loss_dice_1: 2.493  loss_ce_2: 0.003951  loss_mask_2: 0.05241  loss_dice_2: 2.675  loss_ce_3: 0.002628  loss_mask_3: 0.05165  loss_dice_3: 2.742  loss_ce_4: 0.003434  loss_mask_4: 0.0628  loss_dice_4: 2.706  loss_ce_5: 0.002035  loss_mask_5: 0.06031  loss_dice_5: 2.982  loss_ce_6: 0.00333  loss_mask_6: 0.0591  loss_dice_6: 2.856  loss_ce_7: 0.01416  loss_mask_7: 0.04881  loss_dice_7: 2.75  loss_ce_8: 0.1122  loss_mask_8: 0.05144  loss_dice_8: 2.737  time: 0.2629  data_time: 0.0057  lr: 0.0001  max_mem: 2369M
[32m[01/25 13:04:29 d2.utils.events]: [0m eta: 0:26:15  iter: 119  total_loss: 32.7  loss_ce: 0.1717  loss_mask: 0.09365  loss_dice: 3.028  loss_ce_0: 1.094  loss_mask_0: 0.05027  loss_dice_0: 3.102  loss_ce_1: 0.02163  loss_mask_1: 0.0749  loss_dice_1: 3.005  loss_ce_2: 0.004803  loss_mask_2: 0.09028  loss_dice_2: 3.402  loss_ce_3: 0.003372  loss_mask_3: 0.102  loss_dice_3: 3.271  loss_ce_4: 0.0046  loss_mask_4: 0.09157  loss_dice_4: 3.079  loss_ce_5: 0.002845  loss_mask_5: 0.09095  loss_dice_5: 3.364  loss_ce_6: 0.003233  loss_mask_6: 0.09504  loss_dice_6: 3.316  loss_ce_7: 0.00613  loss_mask_7: 0.0981  loss_dice_7: 3.104  loss_ce_8: 0.02709  loss_mask_8: 0.09314  loss_dice_8: 3.455  time: 0.2630  data_time: 0.0056  lr: 0.0001  max_mem: 2369M
[32m[01/25 13:04:35 d2.utils.events]: [0m eta: 0:25:13  iter: 139  total_loss: 32.99  loss_ce: 0.03409  loss_mask: 0.07814  loss_dice: 3.01  loss_ce_0: 1.088  loss_mask_0: 0.05273  loss_dice_0: 3.083  loss_ce_1: 0.01942  loss_mask_1: 0.07837  loss_dice_1: 3.117  loss_ce_2: 0.003367  loss_mask_2: 0.0888  loss_dice_2: 3.17  loss_ce_3: 0.002017  loss_mask_3: 0.1006  loss_dice_3: 3.025  loss_ce_4: 0.0022  loss_mask_4: 0.08528  loss_dice_4: 2.831  loss_ce_5: 0.001593  loss_mask_5: 0.08369  loss_dice_5: 2.967  loss_ce_6: 0.001639  loss_mask_6: 0.08581  loss_dice_6: 3.089  loss_ce_7: 0.001956  loss_mask_7: 0.08321  loss_dice_7: 3.229  loss_ce_8: 0.004721  loss_mask_8: 0.08495  loss_dice_8: 2.892  time: 0.2628  data_time: 0.0059  lr: 0.0001  max_mem: 2369M
[32m[01/25 13:04:40 d2.utils.events]: [0m eta: 0:25:07  iter: 159  total_loss: 28  loss_ce: 0.04777  loss_mask: 0.0668  loss_dice: 2.668  loss_ce_0: 1.082  loss_mask_0: 0.03931  loss_dice_0: 2.431  loss_ce_1: 0.01671  loss_mask_1: 0.06288  loss_dice_1: 2.629  loss_ce_2: 0.002931  loss_mask_2: 0.06756  loss_dice_2: 2.468  loss_ce_3: 0.001914  loss_mask_3: 0.07073  loss_dice_3: 2.68  loss_ce_4: 0.002161  loss_mask_4: 0.07309  loss_dice_4: 2.368  loss_ce_5: 0.001726  loss_mask_5: 0.06751  loss_dice_5: 2.568  loss_ce_6: 0.001948  loss_mask_6: 0.07698  loss_dice_6: 2.599  loss_ce_7: 0.003556  loss_mask_7: 0.072  loss_dice_7: 2.676  loss_ce_8: 0.007818  loss_mask_8: 0.07008  loss_dice_8: 2.497  time: 0.2628  data_time: 0.0058  lr: 0.0001  max_mem: 2369M
[32m[01/25 13:04:45 d2.utils.events]: [0m eta: 0:25:03  iter: 179  total_loss: 25.54  loss_ce: 0.01068  loss_mask: 0.05268  loss_dice: 2.257  loss_ce_0: 1.073  loss_mask_0: 0.04287  loss_dice_0: 2.298  loss_ce_1: 0.0152  loss_mask_1: 0.05818  loss_dice_1: 2.334  loss_ce_2: 0.002495  loss_mask_2: 0.0663  loss_dice_2: 2.537  loss_ce_3: 0.001761  loss_mask_3: 0.07206  loss_dice_3: 2.604  loss_ce_4: 0.002111  loss_mask_4: 0.07164  loss_dice_4: 2.427  loss_ce_5: 0.00151  loss_mask_5: 0.06206  loss_dice_5: 2.383  loss_ce_6: 0.001552  loss_mask_6: 0.06905  loss_dice_6: 2.447  loss_ce_7: 0.002134  loss_mask_7: 0.06653  loss_dice_7: 2.381  loss_ce_8: 0.00307  loss_mask_8: 0.06313  loss_dice_8: 2.429  time: 0.2630  data_time: 0.0065  lr: 0.0001  max_mem: 2369M
[32m[01/25 13:04:51 d2.utils.events]: [0m eta: 0:24:57  iter: 199  total_loss: 23.19  loss_ce: 0.008225  loss_mask: 0.05476  loss_dice: 2.393  loss_ce_0: 1.063  loss_mask_0: 0.03823  loss_dice_0: 1.978  loss_ce_1: 0.01271  loss_mask_1: 0.05823  loss_dice_1: 2.133  loss_ce_2: 0.00187  loss_mask_2: 0.05765  loss_dice_2: 2.157  loss_ce_3: 0.001503  loss_mask_3: 0.05779  loss_dice_3: 2.152  loss_ce_4: 0.002082  loss_mask_4: 0.0603  loss_dice_4: 2.129  loss_ce_5: 0.00137  loss_mask_5: 0.06534  loss_dice_5: 2.222  loss_ce_6: 0.001398  loss_mask_6: 0.06322  loss_dice_6: 2.085  loss_ce_7: 0.001712  loss_mask_7: 0.06278  loss_dice_7: 2.197  loss_ce_8: 0.002624  loss_mask_8: 0.05684  loss_dice_8: 2.013  time: 0.2633  data_time: 0.0062  lr: 0.0001  max_mem: 2369M
[32m[01/25 13:04:56 d2.utils.events]: [0m eta: 0:24:58  iter: 219  total_loss: 21.31  loss_ce: 0.007698  loss_mask: 0.05414  loss_dice: 1.968  loss_ce_0: 1.053  loss_mask_0: 0.03902  loss_dice_0: 2.083  loss_ce_1: 0.01161  loss_mask_1: 0.0465  loss_dice_1: 1.881  loss_ce_2: 0.001658  loss_mask_2: 0.0601  loss_dice_2: 2.045  loss_ce_3: 0.00141  loss_mask_3: 0.06352  loss_dice_3: 2.063  loss_ce_4: 0.001843  loss_mask_4: 0.05378  loss_dice_4: 1.9  loss_ce_5: 0.001411  loss_mask_5: 0.05853  loss_dice_5: 1.79  loss_ce_6: 0.001505  loss_mask_6: 0.06038  loss_dice_6: 2.052  loss_ce_7: 0.001915  loss_mask_7: 0.05746  loss_dice_7: 1.942  loss_ce_8: 0.002738  loss_mask_8: 0.05372  loss_dice_8: 1.811  time: 0.2638  data_time: 0.0057  lr: 0.0001  max_mem: 2369M
[32m[01/25 13:05:01 d2.utils.events]: [0m eta: 0:24:56  iter: 239  total_loss: 22.36  loss_ce: 0.003571  loss_mask: 0.05906  loss_dice: 2.333  loss_ce_0: 1.04  loss_mask_0: 0.03613  loss_dice_0: 2.004  loss_ce_1: 0.01004  loss_mask_1: 0.06109  loss_dice_1: 2.051  loss_ce_2: 0.00156  loss_mask_2: 0.05821  loss_dice_2: 1.969  loss_ce_3: 0.001341  loss_mask_3: 0.06814  loss_dice_3: 2.078  loss_ce_4: 0.001553  loss_mask_4: 0.05942  loss_dice_4: 2.115  loss_ce_5: 0.001151  loss_mask_5: 0.06027  loss_dice_5: 2.114  loss_ce_6: 0.001167  loss_mask_6: 0.06065  loss_dice_6: 2.053  loss_ce_7: 0.001254  loss_mask_7: 0.0548  loss_dice_7: 1.966  loss_ce_8: 0.001534  loss_mask_8: 0.05403  loss_dice_8: 2.207  time: 0.2640  data_time: 0.0055  lr: 0.0001  max_mem: 2369M
[32m[01/25 13:05:07 d2.utils.events]: [0m eta: 0:24:51  iter: 259  total_loss: 21.02  loss_ce: 0.004676  loss_mask: 0.05374  loss_dice: 2.107  loss_ce_0: 1.027  loss_mask_0: 0.03714  loss_dice_0: 2.032  loss_ce_1: 0.009188  loss_mask_1: 0.04837  loss_dice_1: 1.837  loss_ce_2: 0.001461  loss_mask_2: 0.05894  loss_dice_2: 2.012  loss_ce_3: 0.001243  loss_mask_3: 0.05223  loss_dice_3: 1.98  loss_ce_4: 0.001527  loss_mask_4: 0.05398  loss_dice_4: 2.139  loss_ce_5: 0.001192  loss_mask_5: 0.05128  loss_dice_5: 1.915  loss_ce_6: 0.001279  loss_mask_6: 0.0582  loss_dice_6: 1.953  loss_ce_7: 0.001333  loss_mask_7: 0.05909  loss_dice_7: 2.073  loss_ce_8: 0.0017  loss_mask_8: 0.05182  loss_dice_8: 2.119  time: 0.2641  data_time: 0.0056  lr: 0.0001  max_mem: 2369M
[32m[01/25 13:05:12 d2.utils.events]: [0m eta: 0:24:46  iter: 279  total_loss: 21.46  loss_ce: 0.004803  loss_mask: 0.0581  loss_dice: 1.954  loss_ce_0: 1.015  loss_mask_0: 0.04041  loss_dice_0: 1.956  loss_ce_1: 0.008377  loss_mask_1: 0.05443  loss_dice_1: 1.876  loss_ce_2: 0.001469  loss_mask_2: 0.06331  loss_dice_2: 2.001  loss_ce_3: 0.001207  loss_mask_3: 0.05585  loss_dice_3: 1.934  loss_ce_4: 0.001648  loss_mask_4: 0.05435  loss_dice_4: 1.951  loss_ce_5: 0.001306  loss_mask_5: 0.05613  loss_dice_5: 1.731  loss_ce_6: 0.001412  loss_mask_6: 0.05635  loss_dice_6: 1.817  loss_ce_7: 0.00171  loss_mask_7: 0.05214  loss_dice_7: 2.027  loss_ce_8: 0.002098  loss_mask_8: 0.06095  loss_dice_8: 2.304  time: 0.2642  data_time: 0.0058  lr: 0.0001  max_mem: 2369M
[32m[01/25 13:05:17 d2.utils.events]: [0m eta: 0:24:34  iter: 299  total_loss: 21.96  loss_ce: 0.003717  loss_mask: 0.0652  loss_dice: 2.141  loss_ce_0: 0.9999  loss_mask_0: 0.04412  loss_dice_0: 2.094  loss_ce_1: 0.007684  loss_mask_1: 0.05776  loss_dice_1: 2.043  loss_ce_2: 0.001533  loss_mask_2: 0.06561  loss_dice_2: 2.251  loss_ce_3: 0.001198  loss_mask_3: 0.05972  loss_dice_3: 1.941  loss_ce_4: 0.001577  loss_mask_4: 0.06231  loss_dice_4: 2.047  loss_ce_5: 0.00152  loss_mask_5: 0.05626  loss_dice_5: 1.882  loss_ce_6: 0.001341  loss_mask_6: 0.06662  loss_dice_6: 1.979  loss_ce_7: 0.001463  loss_mask_7: 0.0566  loss_dice_7: 1.993  loss_ce_8: 0.001821  loss_mask_8: 0.06108  loss_dice_8: 2.074  time: 0.2639  data_time: 0.0056  lr: 0.0001  max_mem: 2369M
[32m[01/25 13:05:23 d2.utils.events]: [0m eta: 0:24:27  iter: 319  total_loss: 23.49  loss_ce: 0.002356  loss_mask: 0.05934  loss_dice: 2.245  loss_ce_0: 0.985  loss_mask_0: 0.0423  loss_dice_0: 2.258  loss_ce_1: 0.006736  loss_mask_1: 0.05956  loss_dice_1: 2.291  loss_ce_2: 0.001211  loss_mask_2: 0.05833  loss_dice_2: 2.266  loss_ce_3: 0.001091  loss_mask_3: 0.06716  loss_dice_3: 2.141  loss_ce_4: 0.001407  loss_mask_4: 0.07159  loss_dice_4: 2.355  loss_ce_5: 0.001204  loss_mask_5: 0.06232  loss_dice_5: 2.114  loss_ce_6: 0.0009975  loss_mask_6: 0.07274  loss_dice_6: 2.173  loss_ce_7: 0.001014  loss_mask_7: 0.06366  loss_dice_7: 2.249  loss_ce_8: 0.001313  loss_mask_8: 0.06452  loss_dice_8: 2.213  time: 0.2638  data_time: 0.0055  lr: 0.0001  max_mem: 2369M
[32m[01/25 13:05:28 d2.utils.events]: [0m eta: 0:24:23  iter: 339  total_loss: 20.79  loss_ce: 0.002822  loss_mask: 0.05739  loss_dice: 1.772  loss_ce_0: 0.9723  loss_mask_0: 0.04086  loss_dice_0: 2.036  loss_ce_1: 0.006301  loss_mask_1: 0.06094  loss_dice_1: 1.985  loss_ce_2: 0.001105  loss_mask_2: 0.06034  loss_dice_2: 1.984  loss_ce_3: 0.001093  loss_mask_3: 0.06232  loss_dice_3: 2.065  loss_ce_4: 0.001384  loss_mask_4: 0.0598  loss_dice_4: 1.893  loss_ce_5: 0.0012  loss_mask_5: 0.0522  loss_dice_5: 1.828  loss_ce_6: 0.0009772  loss_mask_6: 0.05554  loss_dice_6: 1.904  loss_ce_7: 0.001109  loss_mask_7: 0.06031  loss_dice_7: 2.006  loss_ce_8: 0.001595  loss_mask_8: 0.05487  loss_dice_8: 1.941  time: 0.2640  data_time: 0.0054  lr: 0.0001  max_mem: 2369M
[32m[01/25 13:05:33 d2.utils.events]: [0m eta: 0:24:18  iter: 359  total_loss: 21.38  loss_ce: 0.003037  loss_mask: 0.06406  loss_dice: 2.056  loss_ce_0: 0.9576  loss_mask_0: 0.04247  loss_dice_0: 2.111  loss_ce_1: 0.005746  loss_mask_1: 0.06643  loss_dice_1: 1.981  loss_ce_2: 0.001002  loss_mask_2: 0.06236  loss_dice_2: 2.115  loss_ce_3: 0.0009392  loss_mask_3: 0.06747  loss_dice_3: 1.904  loss_ce_4: 0.001102  loss_mask_4: 0.06176  loss_dice_4: 2.099  loss_ce_5: 0.001109  loss_mask_5: 0.07084  loss_dice_5: 2.041  loss_ce_6: 0.001024  loss_mask_6: 0.06461  loss_dice_6: 2.049  loss_ce_7: 0.001067  loss_mask_7: 0.07446  loss_dice_7: 2.056  loss_ce_8: 0.001548  loss_mask_8: 0.06459  loss_dice_8: 2.191  time: 0.2640  data_time: 0.0057  lr: 0.0001  max_mem: 2369M
[32m[01/25 13:05:39 d2.utils.events]: [0m eta: 0:24:12  iter: 379  total_loss: 21.48  loss_ce: 0.003076  loss_mask: 0.05719  loss_dice: 1.929  loss_ce_0: 0.9382  loss_mask_0: 0.04469  loss_dice_0: 2.112  loss_ce_1: 0.005031  loss_mask_1: 0.05973  loss_dice_1: 1.994  loss_ce_2: 0.0009364  loss_mask_2: 0.05886  loss_dice_2: 1.87  loss_ce_3: 0.0008268  loss_mask_3: 0.05874  loss_dice_3: 2.06  loss_ce_4: 0.001007  loss_mask_4: 0.05261  loss_dice_4: 1.964  loss_ce_5: 0.0009338  loss_mask_5: 0.05973  loss_dice_5: 1.982  loss_ce_6: 0.0009765  loss_mask_6: 0.05914  loss_dice_6: 2.022  loss_ce_7: 0.001024  loss_mask_7: 0.06125  loss_dice_7: 2.167  loss_ce_8: 0.001666  loss_mask_8: 0.05944  loss_dice_8: 1.943  time: 0.2640  data_time: 0.0054  lr: 0.0001  max_mem: 2369M
[32m[01/25 13:05:44 d2.utils.events]: [0m eta: 0:24:10  iter: 399  total_loss: 19.79  loss_ce: 0.001378  loss_mask: 0.06765  loss_dice: 1.767  loss_ce_0: 0.9205  loss_mask_0: 0.04404  loss_dice_0: 1.932  loss_ce_1: 0.004579  loss_mask_1: 0.05926  loss_dice_1: 1.964  loss_ce_2: 0.000853  loss_mask_2: 0.06342  loss_dice_2: 1.737  loss_ce_3: 0.0007935  loss_mask_3: 0.0675  loss_dice_3: 1.865  loss_ce_4: 0.0009875  loss_mask_4: 0.05579  loss_dice_4: 1.793  loss_ce_5: 0.0008371  loss_mask_5: 0.06526  loss_dice_5: 1.975  loss_ce_6: 0.0008374  loss_mask_6: 0.05982  loss_dice_6: 1.757  loss_ce_7: 0.0008639  loss_mask_7: 0.0618  loss_dice_7: 1.813  loss_ce_8: 0.0009971  loss_mask_8: 0.07669  loss_dice_8: 1.695  time: 0.2641  data_time: 0.0052  lr: 0.0001  max_mem: 2369M
[32m[01/25 13:05:49 d2.utils.events]: [0m eta: 0:24:07  iter: 419  total_loss: 22.11  loss_ce: 0.001534  loss_mask: 0.06779  loss_dice: 2.134  loss_ce_0: 0.904  loss_mask_0: 0.04599  loss_dice_0: 2.038  loss_ce_1: 0.004237  loss_mask_1: 0.0617  loss_dice_1: 1.982  loss_ce_2: 0.000869  loss_mask_2: 0.06824  loss_dice_2: 2.007  loss_ce_3: 0.0008451  loss_mask_3: 0.06655  loss_dice_3: 2.046  loss_ce_4: 0.000882  loss_mask_4: 0.06252  loss_dice_4: 2.009  loss_ce_5: 0.0007695  loss_mask_5: 0.0705  loss_dice_5: 1.977  loss_ce_6: 0.0007617  loss_mask_6: 0.07002  loss_dice_6: 2.239  loss_ce_7: 0.0008488  loss_mask_7: 0.06541  loss_dice_7: 2.017  loss_ce_8: 0.001005  loss_mask_8: 0.0746  loss_dice_8: 2.132  time: 0.2643  data_time: 0.0061  lr: 0.0001  max_mem: 2369M
[32m[01/25 13:05:55 d2.utils.events]: [0m eta: 0:24:05  iter: 439  total_loss: 20.99  loss_ce: 0.001908  loss_mask: 0.05776  loss_dice: 1.928  loss_ce_0: 0.8872  loss_mask_0: 0.04551  loss_dice_0: 1.964  loss_ce_1: 0.003676  loss_mask_1: 0.06408  loss_dice_1: 2.089  loss_ce_2: 0.0007513  loss_mask_2: 0.0615  loss_dice_2: 1.972  loss_ce_3: 0.0007513  loss_mask_3: 0.0635  loss_dice_3: 2.059  loss_ce_4: 0.000774  loss_mask_4: 0.05658  loss_dice_4: 1.895  loss_ce_5: 0.0006648  loss_mask_5: 0.06171  loss_dice_5: 2.012  loss_ce_6: 0.0006038  loss_mask_6: 0.06567  loss_dice_6: 1.941  loss_ce_7: 0.0007917  loss_mask_7: 0.06278  loss_dice_7: 1.883  loss_ce_8: 0.0009017  loss_mask_8: 0.06446  loss_dice_8: 1.879  time: 0.2645  data_time: 0.0062  lr: 0.0001  max_mem: 2369M
[32m[01/25 13:06:00 d2.utils.events]: [0m eta: 0:24:24  iter: 459  total_loss: 21.01  loss_ce: 0.001805  loss_mask: 0.06227  loss_dice: 2.166  loss_ce_0: 0.8676  loss_mask_0: 0.04846  loss_dice_0: 1.878  loss_ce_1: 0.003234  loss_mask_1: 0.05952  loss_dice_1: 2.095  loss_ce_2: 0.0005945  loss_mask_2: 0.06537  loss_dice_2: 1.86  loss_ce_3: 0.0006828  loss_mask_3: 0.0611  loss_dice_3: 1.961  loss_ce_4: 0.000767  loss_mask_4: 0.06632  loss_dice_4: 2.035  loss_ce_5: 0.0006426  loss_mask_5: 0.05914  loss_dice_5: 1.915  loss_ce_6: 0.000582  loss_mask_6: 0.06638  loss_dice_6: 2.028  loss_ce_7: 0.0007882  loss_mask_7: 0.06232  loss_dice_7: 1.952  loss_ce_8: 0.000961  loss_mask_8: 0.07148  loss_dice_8: 2.017  time: 0.2647  data_time: 0.0067  lr: 0.0001  max_mem: 2369M
[32m[01/25 13:06:06 d2.utils.events]: [0m eta: 0:24:22  iter: 479  total_loss: 20.8  loss_ce: 0.001919  loss_mask: 0.06447  loss_dice: 1.834  loss_ce_0: 0.8502  loss_mask_0: 0.04682  loss_dice_0: 1.843  loss_ce_1: 0.00309  loss_mask_1: 0.05895  loss_dice_1: 1.967  loss_ce_2: 0.0006068  loss_mask_2: 0.05952  loss_dice_2: 1.99  loss_ce_3: 0.0006574  loss_mask_3: 0.05884  loss_dice_3: 1.874  loss_ce_4: 0.0007287  loss_mask_4: 0.06562  loss_dice_4: 1.945  loss_ce_5: 0.000736  loss_mask_5: 0.0733  loss_dice_5: 1.966  loss_ce_6: 0.0007285  loss_mask_6: 0.06102  loss_dice_6: 1.845  loss_ce_7: 0.0009525  loss_mask_7: 0.06225  loss_dice_7: 2.006  loss_ce_8: 0.001204  loss_mask_8: 0.05804  loss_dice_8: 2.048  time: 0.2648  data_time: 0.0062  lr: 0.0001  max_mem: 2369M
[32m[01/25 13:06:11 d2.utils.events]: [0m eta: 0:24:21  iter: 499  total_loss: 20.07  loss_ce: 0.001703  loss_mask: 0.06661  loss_dice: 1.903  loss_ce_0: 0.8319  loss_mask_0: 0.04853  loss_dice_0: 1.72  loss_ce_1: 0.002894  loss_mask_1: 0.0634  loss_dice_1: 1.745  loss_ce_2: 0.0006244  loss_mask_2: 0.06766  loss_dice_2: 1.827  loss_ce_3: 0.0007421  loss_mask_3: 0.0669  loss_dice_3: 1.798  loss_ce_4: 0.0007529  loss_mask_4: 0.06689  loss_dice_4: 1.888  loss_ce_5: 0.0007029  loss_mask_5: 0.06556  loss_dice_5: 1.738  loss_ce_6: 0.0007334  loss_mask_6: 0.06603  loss_dice_6: 1.747  loss_ce_7: 0.0009129  loss_mask_7: 0.06373  loss_dice_7: 1.941  loss_ce_8: 0.001106  loss_mask_8: 0.06557  loss_dice_8: 1.928  time: 0.2650  data_time: 0.0065  lr: 0.0001  max_mem: 2369M
[32m[01/25 13:06:16 d2.utils.events]: [0m eta: 0:24:16  iter: 519  total_loss: 20.95  loss_ce: 0.001118  loss_mask: 0.06317  loss_dice: 1.971  loss_ce_0: 0.8139  loss_mask_0: 0.04881  loss_dice_0: 1.921  loss_ce_1: 0.002669  loss_mask_1: 0.06497  loss_dice_1: 1.897  loss_ce_2: 0.0005389  loss_mask_2: 0.06203  loss_dice_2: 1.947  loss_ce_3: 0.0006539  loss_mask_3: 0.0626  loss_dice_3: 1.866  loss_ce_4: 0.0006531  loss_mask_4: 0.05973  loss_dice_4: 2.087  loss_ce_5: 0.0005491  loss_mask_5: 0.06337  loss_dice_5: 1.972  loss_ce_6: 0.0005107  loss_mask_6: 0.06018  loss_dice_6: 1.84  loss_ce_7: 0.0006076  loss_mask_7: 0.06058  loss_dice_7: 1.883  loss_ce_8: 0.000794  loss_mask_8: 0.06471  loss_dice_8: 1.93  time: 0.2650  data_time: 0.0071  lr: 0.0001  max_mem: 2369M
[32m[01/25 13:06:22 d2.utils.events]: [0m eta: 0:24:08  iter: 539  total_loss: 21.91  loss_ce: 0.0008858  loss_mask: 0.06492  loss_dice: 1.86  loss_ce_0: 0.796  loss_mask_0: 0.04816  loss_dice_0: 1.977  loss_ce_1: 0.002399  loss_mask_1: 0.06042  loss_dice_1: 2.137  loss_ce_2: 0.0005072  loss_mask_2: 0.06648  loss_dice_2: 2.004  loss_ce_3: 0.0006469  loss_mask_3: 0.06243  loss_dice_3: 2.079  loss_ce_4: 0.0006571  loss_mask_4: 0.06311  loss_dice_4: 1.95  loss_ce_5: 0.0005527  loss_mask_5: 0.06325  loss_dice_5: 1.999  loss_ce_6: 0.0005691  loss_mask_6: 0.06293  loss_dice_6: 2.069  loss_ce_7: 0.0005308  loss_mask_7: 0.05509  loss_dice_7: 1.976  loss_ce_8: 0.00075  loss_mask_8: 0.06565  loss_dice_8: 1.894  time: 0.2651  data_time: 0.0063  lr: 0.0001  max_mem: 2369M
[32m[01/25 13:06:27 d2.utils.events]: [0m eta: 0:23:58  iter: 559  total_loss: 22.28  loss_ce: 0.000913  loss_mask: 0.06459  loss_dice: 2.104  loss_ce_0: 0.7776  loss_mask_0: 0.0492  loss_dice_0: 2.099  loss_ce_1: 0.002255  loss_mask_1: 0.05927  loss_dice_1: 2.167  loss_ce_2: 0.0005643  loss_mask_2: 0.06225  loss_dice_2: 2.02  loss_ce_3: 0.0008222  loss_mask_3: 0.07115  loss_dice_3: 2.092  loss_ce_4: 0.0007514  loss_mask_4: 0.06031  loss_dice_4: 2.08  loss_ce_5: 0.0006151  loss_mask_5: 0.05993  loss_dice_5: 1.86  loss_ce_6: 0.0007475  loss_mask_6: 0.07237  loss_dice_6: 2.032  loss_ce_7: 0.0005773  loss_mask_7: 0.05755  loss_dice_7: 2.122  loss_ce_8: 0.0008128  loss_mask_8: 0.0616  loss_dice_8: 2.075  time: 0.2649  data_time: 0.0058  lr: 0.0001  max_mem: 2369M
[32m[01/25 13:06:32 d2.utils.events]: [0m eta: 0:23:54  iter: 579  total_loss: 19.56  loss_ce: 0.0009248  loss_mask: 0.06825  loss_dice: 1.838  loss_ce_0: 0.7594  loss_mask_0: 0.04505  loss_dice_0: 1.943  loss_ce_1: 0.002153  loss_mask_1: 0.05963  loss_dice_1: 1.846  loss_ce_2: 0.0005281  loss_mask_2: 0.06028  loss_dice_2: 1.867  loss_ce_3: 0.0007525  loss_mask_3: 0.06205  loss_dice_3: 1.888  loss_ce_4: 0.0007423  loss_mask_4: 0.06272  loss_dice_4: 1.861  loss_ce_5: 0.0006931  loss_mask_5: 0.06233  loss_dice_5: 1.859  loss_ce_6: 0.0009538  loss_mask_6: 0.06003  loss_dice_6: 1.844  loss_ce_7: 0.0006366  loss_mask_7: 0.06052  loss_dice_7: 1.936  loss_ce_8: 0.0007995  loss_mask_8: 0.06325  loss_dice_8: 1.86  time: 0.2650  data_time: 0.0056  lr: 0.0001  max_mem: 2369M
[32m[01/25 13:06:38 d2.utils.events]: [0m eta: 0:23:58  iter: 599  total_loss: 18.74  loss_ce: 0.0008823  loss_mask: 0.06327  loss_dice: 1.731  loss_ce_0: 0.7385  loss_mask_0: 0.0419  loss_dice_0: 1.782  loss_ce_1: 0.002005  loss_mask_1: 0.05525  loss_dice_1: 1.777  loss_ce_2: 0.0005083  loss_mask_2: 0.06289  loss_dice_2: 1.918  loss_ce_3: 0.0006642  loss_mask_3: 0.06463  loss_dice_3: 1.877  loss_ce_4: 0.0007223  loss_mask_4: 0.06121  loss_dice_4: 1.759  loss_ce_5: 0.0006441  loss_mask_5: 0.05862  loss_dice_5: 1.795  loss_ce_6: 0.00109  loss_mask_6: 0.05726  loss_dice_6: 1.847  loss_ce_7: 0.0006824  loss_mask_7: 0.05261  loss_dice_7: 1.79  loss_ce_8: 0.0007247  loss_mask_8: 0.05637  loss_dice_8: 1.74  time: 0.2653  data_time: 0.0060  lr: 0.0001  max_mem: 2369M
[32m[01/25 13:06:43 d2.utils.events]: [0m eta: 0:23:47  iter: 619  total_loss: 19.78  loss_ce: 0.001004  loss_mask: 0.05884  loss_dice: 1.822  loss_ce_0: 0.7146  loss_mask_0: 0.04254  loss_dice_0: 1.842  loss_ce_1: 0.001747  loss_mask_1: 0.05282  loss_dice_1: 1.898  loss_ce_2: 0.000427  loss_mask_2: 0.0604  loss_dice_2: 1.926  loss_ce_3: 0.0004524  loss_mask_3: 0.05968  loss_dice_3: 1.778  loss_ce_4: 0.0005038  loss_mask_4: 0.05793  loss_dice_4: 1.752  loss_ce_5: 0.0004854  loss_mask_5: 0.05508  loss_dice_5: 1.816  loss_ce_6: 0.000815  loss_mask_6: 0.05255  loss_dice_6: 1.982  loss_ce_7: 0.0005973  loss_mask_7: 0.05547  loss_dice_7: 1.751  loss_ce_8: 0.0006486  loss_mask_8: 0.05411  loss_dice_8: 2.02  time: 0.2653  data_time: 0.0052  lr: 0.0001  max_mem: 2369M
[32m[01/25 13:06:49 d2.utils.events]: [0m eta: 0:23:41  iter: 639  total_loss: 19.79  loss_ce: 0.0004791  loss_mask: 0.05526  loss_dice: 1.766  loss_ce_0: 0.6933  loss_mask_0: 0.05271  loss_dice_0: 2.003  loss_ce_1: 0.001657  loss_mask_1: 0.04958  loss_dice_1: 1.884  loss_ce_2: 0.0004301  loss_mask_2: 0.06036  loss_dice_2: 1.83  loss_ce_3: 0.0004267  loss_mask_3: 0.05806  loss_dice_3: 1.733  loss_ce_4: 0.0004264  loss_mask_4: 0.06231  loss_dice_4: 1.759  loss_ce_5: 0.000412  loss_mask_5: 0.05539  loss_dice_5: 1.888  loss_ce_6: 0.0005496  loss_mask_6: 0.06417  loss_dice_6: 1.848  loss_ce_7: 0.0004477  loss_mask_7: 0.06437  loss_dice_7: 1.96  loss_ce_8: 0.0004588  loss_mask_8: 0.06404  loss_dice_8: 1.828  time: 0.2653  data_time: 0.0063  lr: 0.0001  max_mem: 2369M
[32m[01/25 13:06:54 d2.utils.events]: [0m eta: 0:23:38  iter: 659  total_loss: 19.71  loss_ce: 0.0005921  loss_mask: 0.06433  loss_dice: 1.771  loss_ce_0: 0.6724  loss_mask_0: 0.05216  loss_dice_0: 1.808  loss_ce_1: 0.001662  loss_mask_1: 0.05985  loss_dice_1: 1.793  loss_ce_2: 0.0004556  loss_mask_2: 0.06588  loss_dice_2: 1.788  loss_ce_3: 0.0004573  loss_mask_3: 0.0761  loss_dice_3: 1.941  loss_ce_4: 0.000396  loss_mask_4: 0.06074  loss_dice_4: 1.699  loss_ce_5: 0.0003767  loss_mask_5: 0.06434  loss_dice_5: 1.881  loss_ce_6: 0.0004319  loss_mask_6: 0.07116  loss_dice_6: 1.749  loss_ce_7: 0.0004391  loss_mask_7: 0.07386  loss_dice_7: 1.924  loss_ce_8: 0.0004677  loss_mask_8: 0.06335  loss_dice_8: 1.716  time: 0.2654  data_time: 0.0056  lr: 0.0001  max_mem: 2369M
[32m[01/25 13:06:59 d2.utils.events]: [0m eta: 0:23:31  iter: 679  total_loss: 20.63  loss_ce: 0.0009493  loss_mask: 0.06611  loss_dice: 1.918  loss_ce_0: 0.6527  loss_mask_0: 0.04603  loss_dice_0: 1.931  loss_ce_1: 0.001586  loss_mask_1: 0.05854  loss_dice_1: 1.867  loss_ce_2: 0.0004802  loss_mask_2: 0.06028  loss_dice_2: 2.046  loss_ce_3: 0.0004766  loss_mask_3: 0.06942  loss_dice_3: 1.927  loss_ce_4: 0.0003851  loss_mask_4: 0.06624  loss_dice_4: 1.97  loss_ce_5: 0.0003591  loss_mask_5: 0.06459  loss_dice_5: 1.963  loss_ce_6: 0.000354  loss_mask_6: 0.0627  loss_dice_6: 1.974  loss_ce_7: 0.0003272  loss_mask_7: 0.05537  loss_dice_7: 1.747  loss_ce_8: 0.0005655  loss_mask_8: 0.06189  loss_dice_8: 1.866  time: 0.2653  data_time: 0.0052  lr: 0.0001  max_mem: 2369M
[32m[01/25 13:07:05 d2.utils.events]: [0m eta: 0:23:33  iter: 699  total_loss: 18.96  loss_ce: 0.001153  loss_mask: 0.06061  loss_dice: 1.831  loss_ce_0: 0.6342  loss_mask_0: 0.05337  loss_dice_0: 1.767  loss_ce_1: 0.001581  loss_mask_1: 0.05681  loss_dice_1: 1.994  loss_ce_2: 0.0004575  loss_mask_2: 0.06301  loss_dice_2: 1.818  loss_ce_3: 0.0006064  loss_mask_3: 0.06803  loss_dice_3: 1.75  loss_ce_4: 0.0004499  loss_mask_4: 0.06528  loss_dice_4: 1.648  loss_ce_5: 0.0004006  loss_mask_5: 0.06164  loss_dice_5: 1.776  loss_ce_6: 0.0004138  loss_mask_6: 0.06303  loss_dice_6: 1.749  loss_ce_7: 0.0003901  loss_mask_7: 0.05199  loss_dice_7: 1.641  loss_ce_8: 0.0007589  loss_mask_8: 0.05733  loss_dice_8: 1.649  time: 0.2656  data_time: 0.0045  lr: 0.0001  max_mem: 2369M
[32m[01/25 13:07:10 d2.utils.events]: [0m eta: 0:23:28  iter: 719  total_loss: 18.35  loss_ce: 0.0007919  loss_mask: 0.05608  loss_dice: 1.857  loss_ce_0: 0.6128  loss_mask_0: 0.05313  loss_dice_0: 1.832  loss_ce_1: 0.001341  loss_mask_1: 0.05369  loss_dice_1: 1.662  loss_ce_2: 0.0003661  loss_mask_2: 0.05432  loss_dice_2: 1.644  loss_ce_3: 0.0003998  loss_mask_3: 0.05816  loss_dice_3: 1.533  loss_ce_4: 0.0003178  loss_mask_4: 0.05946  loss_dice_4: 1.664  loss_ce_5: 0.0002968  loss_mask_5: 0.0572  loss_dice_5: 1.697  loss_ce_6: 0.0003627  loss_mask_6: 0.0632  loss_dice_6: 1.699  loss_ce_7: 0.000363  loss_mask_7: 0.05915  loss_dice_7: 1.711  loss_ce_8: 0.0006511  loss_mask_8: 0.06414  loss_dice_8: 1.737  time: 0.2656  data_time: 0.0049  lr: 0.0001  max_mem: 2369M
[32m[01/25 13:07:16 d2.utils.events]: [0m eta: 0:23:23  iter: 739  total_loss: 19.94  loss_ce: 0.0005718  loss_mask: 0.05852  loss_dice: 1.734  loss_ce_0: 0.59  loss_mask_0: 0.05395  loss_dice_0: 1.784  loss_ce_1: 0.001249  loss_mask_1: 0.05639  loss_dice_1: 1.897  loss_ce_2: 0.0003618  loss_mask_2: 0.05519  loss_dice_2: 1.736  loss_ce_3: 0.000352  loss_mask_3: 0.06581  loss_dice_3: 1.931  loss_ce_4: 0.000295  loss_mask_4: 0.06322  loss_dice_4: 1.814  loss_ce_5: 0.0003169  loss_mask_5: 0.05985  loss_dice_5: 1.77  loss_ce_6: 0.0003433  loss_mask_6: 0.06833  loss_dice_6: 1.935  loss_ce_7: 0.0002955  loss_mask_7: 0.06353  loss_dice_7: 1.752  loss_ce_8: 0.000401  loss_mask_8: 0.07119  loss_dice_8: 1.94  time: 0.2657  data_time: 0.0046  lr: 0.0001  max_mem: 2369M
[32m[01/25 13:07:21 d2.utils.events]: [0m eta: 0:23:17  iter: 759  total_loss: 17.96  loss_ce: 0.0008036  loss_mask: 0.06207  loss_dice: 1.632  loss_ce_0: 0.5717  loss_mask_0: 0.05472  loss_dice_0: 1.605  loss_ce_1: 0.001175  loss_mask_1: 0.06577  loss_dice_1: 1.608  loss_ce_2: 0.0003286  loss_mask_2: 0.06816  loss_dice_2: 1.728  loss_ce_3: 0.0002807  loss_mask_3: 0.05665  loss_dice_3: 1.554  loss_ce_4: 0.0002561  loss_mask_4: 0.06186  loss_dice_4: 1.654  loss_ce_5: 0.0003089  loss_mask_5: 0.06073  loss_dice_5: 1.692  loss_ce_6: 0.0003757  loss_mask_6: 0.06666  loss_dice_6: 1.622  loss_ce_7: 0.0002931  loss_mask_7: 0.0585  loss_dice_7: 1.645  loss_ce_8: 0.0003869  loss_mask_8: 0.06338  loss_dice_8: 1.779  time: 0.2657  data_time: 0.0051  lr: 0.0001  max_mem: 2369M
[32m[01/25 13:07:26 d2.utils.events]: [0m eta: 0:23:12  iter: 779  total_loss: 18.28  loss_ce: 0.0005416  loss_mask: 0.05571  loss_dice: 1.751  loss_ce_0: 0.554  loss_mask_0: 0.05724  loss_dice_0: 1.696  loss_ce_1: 0.001048  loss_mask_1: 0.06419  loss_dice_1: 1.664  loss_ce_2: 0.0003018  loss_mask_2: 0.06096  loss_dice_2: 1.595  loss_ce_3: 0.0002742  loss_mask_3: 0.06495  loss_dice_3: 1.736  loss_ce_4: 0.0002519  loss_mask_4: 0.06285  loss_dice_4: 1.803  loss_ce_5: 0.000274  loss_mask_5: 0.06031  loss_dice_5: 1.691  loss_ce_6: 0.000336  loss_mask_6: 0.06315  loss_dice_6: 1.618  loss_ce_7: 0.0002483  loss_mask_7: 0.064  loss_dice_7: 1.819  loss_ce_8: 0.0003447  loss_mask_8: 0.06466  loss_dice_8: 1.742  time: 0.2657  data_time: 0.0036  lr: 0.0001  max_mem: 2369M
[32m[01/25 13:07:32 d2.utils.events]: [0m eta: 0:23:07  iter: 799  total_loss: 18.93  loss_ce: 0.0004136  loss_mask: 0.05464  loss_dice: 1.753  loss_ce_0: 0.5375  loss_mask_0: 0.05421  loss_dice_0: 1.725  loss_ce_1: 0.001005  loss_mask_1: 0.05897  loss_dice_1: 1.62  loss_ce_2: 0.000294  loss_mask_2: 0.05729  loss_dice_2: 1.628  loss_ce_3: 0.0003045  loss_mask_3: 0.05886  loss_dice_3: 1.665  loss_ce_4: 0.0002746  loss_mask_4: 0.05001  loss_dice_4: 1.74  loss_ce_5: 0.0002831  loss_mask_5: 0.05479  loss_dice_5: 1.755  loss_ce_6: 0.0003746  loss_mask_6: 0.05868  loss_dice_6: 1.691  loss_ce_7: 0.0002532  loss_mask_7: 0.05663  loss_dice_7: 1.706  loss_ce_8: 0.000304  loss_mask_8: 0.05398  loss_dice_8: 1.809  time: 0.2656  data_time: 0.0045  lr: 0.0001  max_mem: 2369M
[32m[01/25 13:07:37 d2.utils.events]: [0m eta: 0:23:01  iter: 819  total_loss: 18.36  loss_ce: 0.0003015  loss_mask: 0.06691  loss_dice: 1.868  loss_ce_0: 0.5199  loss_mask_0: 0.05229  loss_dice_0: 1.9  loss_ce_1: 0.0009323  loss_mask_1: 0.06143  loss_dice_1: 1.72  loss_ce_2: 0.0003  loss_mask_2: 0.06609  loss_dice_2: 1.772  loss_ce_3: 0.0003198  loss_mask_3: 0.05514  loss_dice_3: 1.652  loss_ce_4: 0.0003128  loss_mask_4: 0.06102  loss_dice_4: 1.794  loss_ce_5: 0.0002757  loss_mask_5: 0.06083  loss_dice_5: 1.727  loss_ce_6: 0.0003065  loss_mask_6: 0.0568  loss_dice_6: 1.727  loss_ce_7: 0.0002078  loss_mask_7: 0.05992  loss_dice_7: 1.675  loss_ce_8: 0.0002913  loss_mask_8: 0.0593  loss_dice_8: 1.797  time: 0.2656  data_time: 0.0042  lr: 0.0001  max_mem: 2369M
[32m[01/25 13:07:42 d2.utils.events]: [0m eta: 0:22:56  iter: 839  total_loss: 18.33  loss_ce: 0.0002858  loss_mask: 0.06032  loss_dice: 1.71  loss_ce_0: 0.501  loss_mask_0: 0.0579  loss_dice_0: 1.76  loss_ce_1: 0.0008471  loss_mask_1: 0.05693  loss_dice_1: 1.714  loss_ce_2: 0.0002547  loss_mask_2: 0.05872  loss_dice_2: 1.753  loss_ce_3: 0.0002619  loss_mask_3: 0.06417  loss_dice_3: 1.682  loss_ce_4: 0.0002397  loss_mask_4: 0.06234  loss_dice_4: 1.875  loss_ce_5: 0.000221  loss_mask_5: 0.05983  loss_dice_5: 1.67  loss_ce_6: 0.0002311  loss_mask_6: 0.05872  loss_dice_6: 1.77  loss_ce_7: 0.0001713  loss_mask_7: 0.06556  loss_dice_7: 1.708  loss_ce_8: 0.0002631  loss_mask_8: 0.05773  loss_dice_8: 1.655  time: 0.2656  data_time: 0.0047  lr: 0.0001  max_mem: 2369M
[32m[01/25 13:07:48 d2.utils.events]: [0m eta: 0:22:52  iter: 859  total_loss: 18.61  loss_ce: 0.0002672  loss_mask: 0.05443  loss_dice: 1.746  loss_ce_0: 0.4816  loss_mask_0: 0.04979  loss_dice_0: 1.693  loss_ce_1: 0.0007835  loss_mask_1: 0.0476  loss_dice_1: 1.782  loss_ce_2: 0.000226  loss_mask_2: 0.05424  loss_dice_2: 1.713  loss_ce_3: 0.0002471  loss_mask_3: 0.0576  loss_dice_3: 1.804  loss_ce_4: 0.0002383  loss_mask_4: 0.05541  loss_dice_4: 1.853  loss_ce_5: 0.0002266  loss_mask_5: 0.05201  loss_dice_5: 1.867  loss_ce_6: 0.0002233  loss_mask_6: 0.0553  loss_dice_6: 1.852  loss_ce_7: 0.0001512  loss_mask_7: 0.05976  loss_dice_7: 1.774  loss_ce_8: 0.0002235  loss_mask_8: 0.05613  loss_dice_8: 1.804  time: 0.2656  data_time: 0.0037  lr: 0.0001  max_mem: 2369M
[32m[01/25 13:07:53 d2.utils.events]: [0m eta: 0:22:48  iter: 879  total_loss: 17.46  loss_ce: 0.0005913  loss_mask: 0.04549  loss_dice: 1.543  loss_ce_0: 0.4628  loss_mask_0: 0.0524  loss_dice_0: 1.587  loss_ce_1: 0.0007381  loss_mask_1: 0.05305  loss_dice_1: 1.63  loss_ce_2: 0.0002327  loss_mask_2: 0.05389  loss_dice_2: 1.563  loss_ce_3: 0.0002992  loss_mask_3: 0.05442  loss_dice_3: 1.718  loss_ce_4: 0.0002765  loss_mask_4: 0.05569  loss_dice_4: 1.595  loss_ce_5: 0.0002601  loss_mask_5: 0.05159  loss_dice_5: 1.739  loss_ce_6: 0.0002902  loss_mask_6: 0.05554  loss_dice_6: 1.616  loss_ce_7: 0.000184  loss_mask_7: 0.05736  loss_dice_7: 1.675  loss_ce_8: 0.0002805  loss_mask_8: 0.05287  loss_dice_8: 1.68  time: 0.2657  data_time: 0.0049  lr: 0.0001  max_mem: 2369M
[32m[01/25 13:07:58 d2.utils.events]: [0m eta: 0:22:44  iter: 899  total_loss: 17.63  loss_ce: 0.0003435  loss_mask: 0.06145  loss_dice: 1.641  loss_ce_0: 0.4423  loss_mask_0: 0.05224  loss_dice_0: 1.641  loss_ce_1: 0.0006251  loss_mask_1: 0.05398  loss_dice_1: 1.626  loss_ce_2: 0.0001993  loss_mask_2: 0.05328  loss_dice_2: 1.754  loss_ce_3: 0.0002569  loss_mask_3: 0.06194  loss_dice_3: 1.686  loss_ce_4: 0.0002066  loss_mask_4: 0.0584  loss_dice_4: 1.552  loss_ce_5: 0.0001925  loss_mask_5: 0.05448  loss_dice_5: 1.657  loss_ce_6: 0.0002226  loss_mask_6: 0.05281  loss_dice_6: 1.61  loss_ce_7: 0.0001454  loss_mask_7: 0.06184  loss_dice_7: 1.668  loss_ce_8: 0.0001897  loss_mask_8: 0.05833  loss_dice_8: 1.59  time: 0.2657  data_time: 0.0039  lr: 0.0001  max_mem: 2369M
[32m[01/25 13:08:04 d2.utils.events]: [0m eta: 0:22:36  iter: 919  total_loss: 16.92  loss_ce: 0.0003827  loss_mask: 0.0531  loss_dice: 1.474  loss_ce_0: 0.4239  loss_mask_0: 0.04685  loss_dice_0: 1.544  loss_ce_1: 0.0006001  loss_mask_1: 0.0536  loss_dice_1: 1.59  loss_ce_2: 0.0002404  loss_mask_2: 0.0557  loss_dice_2: 1.627  loss_ce_3: 0.0002837  loss_mask_3: 0.05556  loss_dice_3: 1.693  loss_ce_4: 0.0002216  loss_mask_4: 0.05777  loss_dice_4: 1.657  loss_ce_5: 0.0002096  loss_mask_5: 0.05198  loss_dice_5: 1.544  loss_ce_6: 0.00025  loss_mask_6: 0.05478  loss_dice_6: 1.607  loss_ce_7: 0.0001675  loss_mask_7: 0.0528  loss_dice_7: 1.633  loss_ce_8: 0.0002017  loss_mask_8: 0.05336  loss_dice_8: 1.566  time: 0.2657  data_time: 0.0042  lr: 0.0001  max_mem: 2369M
[32m[01/25 13:08:09 d2.utils.events]: [0m eta: 0:22:32  iter: 939  total_loss: 16.71  loss_ce: 0.0003999  loss_mask: 0.05958  loss_dice: 1.587  loss_ce_0: 0.4059  loss_mask_0: 0.04957  loss_dice_0: 1.668  loss_ce_1: 0.0005642  loss_mask_1: 0.0615  loss_dice_1: 1.61  loss_ce_2: 0.0002451  loss_mask_2: 0.06464  loss_dice_2: 1.605  loss_ce_3: 0.0002912  loss_mask_3: 0.05958  loss_dice_3: 1.592  loss_ce_4: 0.0002447  loss_mask_4: 0.06474  loss_dice_4: 1.894  loss_ce_5: 0.0002117  loss_mask_5: 0.06059  loss_dice_5: 1.744  loss_ce_6: 0.0002514  loss_mask_6: 0.06598  loss_dice_6: 1.76  loss_ce_7: 0.0001902  loss_mask_7: 0.05901  loss_dice_7: 1.557  loss_ce_8: 0.0002155  loss_mask_8: 0.06325  loss_dice_8: 1.724  time: 0.2658  data_time: 0.0051  lr: 0.0001  max_mem: 2369M
[32m[01/25 13:08:14 d2.utils.events]: [0m eta: 0:22:24  iter: 959  total_loss: 17.28  loss_ce: 0.0003592  loss_mask: 0.05674  loss_dice: 1.612  loss_ce_0: 0.3907  loss_mask_0: 0.05091  loss_dice_0: 1.772  loss_ce_1: 0.0005147  loss_mask_1: 0.0513  loss_dice_1: 1.719  loss_ce_2: 0.0001956  loss_mask_2: 0.0568  loss_dice_2: 1.583  loss_ce_3: 0.0002272  loss_mask_3: 0.05739  loss_dice_3: 1.668  loss_ce_4: 0.0002377  loss_mask_4: 0.05544  loss_dice_4: 1.801  loss_ce_5: 0.0001722  loss_mask_5: 0.05727  loss_dice_5: 1.742  loss_ce_6: 0.0001832  loss_mask_6: 0.05569  loss_dice_6: 1.549  loss_ce_7: 0.0001397  loss_mask_7: 0.05526  loss_dice_7: 1.695  loss_ce_8: 0.0001613  loss_mask_8: 0.06098  loss_dice_8: 1.58  time: 0.2657  data_time: 0.0040  lr: 0.0001  max_mem: 2369M
[32m[01/25 13:08:20 d2.utils.events]: [0m eta: 0:22:21  iter: 979  total_loss: 16.11  loss_ce: 0.0004207  loss_mask: 0.06349  loss_dice: 1.622  loss_ce_0: 0.3772  loss_mask_0: 0.06112  loss_dice_0: 1.438  loss_ce_1: 0.0005059  loss_mask_1: 0.05702  loss_dice_1: 1.526  loss_ce_2: 0.0001817  loss_mask_2: 0.07284  loss_dice_2: 1.647  loss_ce_3: 0.0001912  loss_mask_3: 0.06544  loss_dice_3: 1.457  loss_ce_4: 0.0002079  loss_mask_4: 0.06407  loss_dice_4: 1.512  loss_ce_5: 0.0001416  loss_mask_5: 0.06546  loss_dice_5: 1.459  loss_ce_6: 0.0001506  loss_mask_6: 0.05658  loss_dice_6: 1.583  loss_ce_7: 0.0001156  loss_mask_7: 0.06552  loss_dice_7: 1.608  loss_ce_8: 0.0001601  loss_mask_8: 0.06519  loss_dice_8: 1.671  time: 0.2658  data_time: 0.0046  lr: 0.0001  max_mem: 2369M
[32m[01/25 13:08:25 d2.utils.events]: [0m eta: 0:22:20  iter: 999  total_loss: 16.84  loss_ce: 0.0004234  loss_mask: 0.06019  loss_dice: 1.579  loss_ce_0: 0.3639  loss_mask_0: 0.05725  loss_dice_0: 1.66  loss_ce_1: 0.0004676  loss_mask_1: 0.05932  loss_dice_1: 1.732  loss_ce_2: 0.0001339  loss_mask_2: 0.05395  loss_dice_2: 1.611  loss_ce_3: 0.0001359  loss_mask_3: 0.05488  loss_dice_3: 1.51  loss_ce_4: 0.0001431  loss_mask_4: 0.05932  loss_dice_4: 1.562  loss_ce_5: 0.0001189  loss_mask_5: 0.06028  loss_dice_5: 1.68  loss_ce_6: 0.0001075  loss_mask_6: 0.05576  loss_dice_6: 1.852  loss_ce_7: 9.02e-05  loss_mask_7: 0.0542  loss_dice_7: 1.668  loss_ce_8: 0.0001463  loss_mask_8: 0.05517  loss_dice_8: 1.699  time: 0.2658  data_time: 0.0039  lr: 0.0001  max_mem: 2369M
[32m[01/25 13:08:31 d2.utils.events]: [0m eta: 0:22:19  iter: 1019  total_loss: 16.33  loss_ce: 0.0002831  loss_mask: 0.06042  loss_dice: 1.516  loss_ce_0: 0.3502  loss_mask_0: 0.05691  loss_dice_0: 1.54  loss_ce_1: 0.0004462  loss_mask_1: 0.05428  loss_dice_1: 1.54  loss_ce_2: 0.0001218  loss_mask_2: 0.05467  loss_dice_2: 1.581  loss_ce_3: 0.0001035  loss_mask_3: 0.06178  loss_dice_3: 1.544  loss_ce_4: 0.0001163  loss_mask_4: 0.05655  loss_dice_4: 1.465  loss_ce_5: 9.421e-05  loss_mask_5: 0.05466  loss_dice_5: 1.512  loss_ce_6: 8.823e-05  loss_mask_6: 0.05334  loss_dice_6: 1.523  loss_ce_7: 6.809e-05  loss_mask_7: 0.05681  loss_dice_7: 1.582  loss_ce_8: 9.686e-05  loss_mask_8: 0.05633  loss_dice_8: 1.506  time: 0.2659  data_time: 0.0043  lr: 0.0001  max_mem: 2369M
[32m[01/25 13:08:36 d2.utils.events]: [0m eta: 0:22:15  iter: 1039  total_loss: 17.19  loss_ce: 0.0001913  loss_mask: 0.05527  loss_dice: 1.49  loss_ce_0: 0.335  loss_mask_0: 0.05369  loss_dice_0: 1.648  loss_ce_1: 0.0003951  loss_mask_1: 0.05206  loss_dice_1: 1.684  loss_ce_2: 0.0001177  loss_mask_2: 0.0514  loss_dice_2: 1.642  loss_ce_3: 0.0001029  loss_mask_3: 0.05419  loss_dice_3: 1.54  loss_ce_4: 0.0001219  loss_mask_4: 0.05786  loss_dice_4: 1.507  loss_ce_5: 0.0001036  loss_mask_5: 0.05683  loss_dice_5: 1.643  loss_ce_6: 9.391e-05  loss_mask_6: 0.05335  loss_dice_6: 1.493  loss_ce_7: 6.471e-05  loss_mask_7: 0.05693  loss_dice_7: 1.524  loss_ce_8: 8.693e-05  loss_mask_8: 0.05707  loss_dice_8: 1.621  time: 0.2659  data_time: 0.0046  lr: 0.0001  max_mem: 2369M
[32m[01/25 13:08:41 d2.utils.events]: [0m eta: 0:22:08  iter: 1059  total_loss: 18.04  loss_ce: 0.000182  loss_mask: 0.05721  loss_dice: 1.787  loss_ce_0: 0.3219  loss_mask_0: 0.05469  loss_dice_0: 1.652  loss_ce_1: 0.0003744  loss_mask_1: 0.05261  loss_dice_1: 1.626  loss_ce_2: 0.0001348  loss_mask_2: 0.063  loss_dice_2: 1.804  loss_ce_3: 0.0001133  loss_mask_3: 0.05176  loss_dice_3: 1.605  loss_ce_4: 0.0001419  loss_mask_4: 0.0578  loss_dice_4: 1.78  loss_ce_5: 0.0001123  loss_mask_5: 0.05528  loss_dice_5: 1.741  loss_ce_6: 9.945e-05  loss_mask_6: 0.05933  loss_dice_6: 1.717  loss_ce_7: 7.352e-05  loss_mask_7: 0.05414  loss_dice_7: 1.715  loss_ce_8: 0.0001071  loss_mask_8: 0.06132  loss_dice_8: 1.573  time: 0.2658  data_time: 0.0047  lr: 0.0001  max_mem: 2369M
[32m[01/25 13:08:46 d2.utils.events]: [0m eta: 0:21:52  iter: 1079  total_loss: 16.98  loss_ce: 0.0002246  loss_mask: 0.06051  loss_dice: 1.692  loss_ce_0: 0.309  loss_mask_0: 0.04794  loss_dice_0: 1.595  loss_ce_1: 0.0003877  loss_mask_1: 0.06018  loss_dice_1: 1.626  loss_ce_2: 0.0001513  loss_mask_2: 0.05696  loss_dice_2: 1.579  loss_ce_3: 0.0001348  loss_mask_3: 0.06117  loss_dice_3: 1.645  loss_ce_4: 0.0001777  loss_mask_4: 0.06513  loss_dice_4: 1.623  loss_ce_5: 0.0001396  loss_mask_5: 0.06245  loss_dice_5: 1.67  loss_ce_6: 0.0001329  loss_mask_6: 0.05765  loss_dice_6: 1.603  loss_ce_7: 0.0001004  loss_mask_7: 0.0593  loss_dice_7: 1.677  loss_ce_8: 0.0001509  loss_mask_8: 0.06185  loss_dice_8: 1.643  time: 0.2657  data_time: 0.0040  lr: 0.0001  max_mem: 2369M
[32m[01/25 13:08:52 d2.utils.events]: [0m eta: 0:21:46  iter: 1099  total_loss: 16.16  loss_ce: 0.0002384  loss_mask: 0.06058  loss_dice: 1.515  loss_ce_0: 0.295  loss_mask_0: 0.05154  loss_dice_0: 1.535  loss_ce_1: 0.0003821  loss_mask_1: 0.05994  loss_dice_1: 1.489  loss_ce_2: 0.0001438  loss_mask_2: 0.06317  loss_dice_2: 1.6  loss_ce_3: 0.000129  loss_mask_3: 0.05361  loss_dice_3: 1.487  loss_ce_4: 0.0001815  loss_mask_4: 0.06208  loss_dice_4: 1.474  loss_ce_5: 0.0001678  loss_mask_5: 0.06372  loss_dice_5: 1.566  loss_ce_6: 0.0001783  loss_mask_6: 0.06172  loss_dice_6: 1.449  loss_ce_7: 0.0001474  loss_mask_7: 0.05727  loss_dice_7: 1.496  loss_ce_8: 0.0001773  loss_mask_8: 0.05608  loss_dice_8: 1.579  time: 0.2657  data_time: 0.0043  lr: 0.0001  max_mem: 2369M
[32m[01/25 13:08:57 d2.utils.events]: [0m eta: 0:21:41  iter: 1119  total_loss: 16.94  loss_ce: 0.0002296  loss_mask: 0.05742  loss_dice: 1.52  loss_ce_0: 0.2819  loss_mask_0: 0.05343  loss_dice_0: 1.605  loss_ce_1: 0.0003612  loss_mask_1: 0.05463  loss_dice_1: 1.608  loss_ce_2: 0.0001165  loss_mask_2: 0.05113  loss_dice_2: 1.45  loss_ce_3: 0.0001144  loss_mask_3: 0.06096  loss_dice_3: 1.522  loss_ce_4: 0.0001446  loss_mask_4: 0.05611  loss_dice_4: 1.588  loss_ce_5: 0.0001641  loss_mask_5: 0.06083  loss_dice_5: 1.475  loss_ce_6: 0.0001939  loss_mask_6: 0.06505  loss_dice_6: 1.628  loss_ce_7: 0.0001498  loss_mask_7: 0.06616  loss_dice_7: 1.635  loss_ce_8: 0.0001574  loss_mask_8: 0.05574  loss_dice_8: 1.487  time: 0.2656  data_time: 0.0044  lr: 0.0001  max_mem: 2369M
[32m[01/25 13:09:03 d2.utils.events]: [0m eta: 0:21:40  iter: 1139  total_loss: 15.57  loss_ce: 0.0002794  loss_mask: 0.06211  loss_dice: 1.484  loss_ce_0: 0.2697  loss_mask_0: 0.0516  loss_dice_0: 1.345  loss_ce_1: 0.0003597  loss_mask_1: 0.05861  loss_dice_1: 1.332  loss_ce_2: 0.0001029  loss_mask_2: 0.05483  loss_dice_2: 1.569  loss_ce_3: 9.86e-05  loss_mask_3: 0.05096  loss_dice_3: 1.355  loss_ce_4: 0.0001218  loss_mask_4: 0.05607  loss_dice_4: 1.454  loss_ce_5: 0.0001422  loss_mask_5: 0.05416  loss_dice_5: 1.552  loss_ce_6: 0.0001976  loss_mask_6: 0.06343  loss_dice_6: 1.518  loss_ce_7: 0.0001323  loss_mask_7: 0.05305  loss_dice_7: 1.496  loss_ce_8: 0.0001342  loss_mask_8: 0.06224  loss_dice_8: 1.558  time: 0.2657  data_time: 0.0039  lr: 0.0001  max_mem: 2369M
[32m[01/25 13:09:08 d2.utils.events]: [0m eta: 0:21:42  iter: 1159  total_loss: 17.09  loss_ce: 0.0001585  loss_mask: 0.05564  loss_dice: 1.53  loss_ce_0: 0.2581  loss_mask_0: 0.0504  loss_dice_0: 1.569  loss_ce_1: 0.000326  loss_mask_1: 0.05442  loss_dice_1: 1.671  loss_ce_2: 9.537e-05  loss_mask_2: 0.05349  loss_dice_2: 1.637  loss_ce_3: 7.727e-05  loss_mask_3: 0.05288  loss_dice_3: 1.645  loss_ce_4: 8.451e-05  loss_mask_4: 0.05468  loss_dice_4: 1.545  loss_ce_5: 9.853e-05  loss_mask_5: 0.05861  loss_dice_5: 1.541  loss_ce_6: 0.0001203  loss_mask_6: 0.06247  loss_dice_6: 1.619  loss_ce_7: 6.722e-05  loss_mask_7: 0.05394  loss_dice_7: 1.62  loss_ce_8: 9.614e-05  loss_mask_8: 0.05228  loss_dice_8: 1.647  time: 0.2657  data_time: 0.0039  lr: 0.0001  max_mem: 2369M
[32m[01/25 13:09:13 d2.utils.events]: [0m eta: 0:21:36  iter: 1179  total_loss: 16.32  loss_ce: 0.0001424  loss_mask: 0.06327  loss_dice: 1.614  loss_ce_0: 0.2474  loss_mask_0: 0.05227  loss_dice_0: 1.651  loss_ce_1: 0.000352  loss_mask_1: 0.0575  loss_dice_1: 1.603  loss_ce_2: 9.845e-05  loss_mask_2: 0.05644  loss_dice_2: 1.479  loss_ce_3: 7.096e-05  loss_mask_3: 0.05956  loss_dice_3: 1.695  loss_ce_4: 7.245e-05  loss_mask_4: 0.05784  loss_dice_4: 1.382  loss_ce_5: 7.937e-05  loss_mask_5: 0.0647  loss_dice_5: 1.459  loss_ce_6: 0.0001081  loss_mask_6: 0.06556  loss_dice_6: 1.507  loss_ce_7: 7.124e-05  loss_mask_7: 0.05754  loss_dice_7: 1.61  loss_ce_8: 9.395e-05  loss_mask_8: 0.05884  loss_dice_8: 1.453  time: 0.2657  data_time: 0.0054  lr: 0.0001  max_mem: 2369M
[32m[01/25 13:09:19 d2.utils.events]: [0m eta: 0:21:33  iter: 1199  total_loss: 16.5  loss_ce: 0.0001302  loss_mask: 0.05609  loss_dice: 1.501  loss_ce_0: 0.2365  loss_mask_0: 0.05505  loss_dice_0: 1.587  loss_ce_1: 0.0003225  loss_mask_1: 0.05652  loss_dice_1: 1.623  loss_ce_2: 8.806e-05  loss_mask_2: 0.06353  loss_dice_2: 1.621  loss_ce_3: 7.567e-05  loss_mask_3: 0.05038  loss_dice_3: 1.456  loss_ce_4: 8.523e-05  loss_mask_4: 0.05595  loss_dice_4: 1.544  loss_ce_5: 8.58e-05  loss_mask_5: 0.06315  loss_dice_5: 1.648  loss_ce_6: 0.0001096  loss_mask_6: 0.05787  loss_dice_6: 1.519  loss_ce_7: 7.177e-05  loss_mask_7: 0.04973  loss_dice_7: 1.503  loss_ce_8: 9.334e-05  loss_mask_8: 0.06236  loss_dice_8: 1.602  time: 0.2658  data_time: 0.0046  lr: 0.0001  max_mem: 2369M
[32m[01/25 13:09:24 d2.utils.events]: [0m eta: 0:21:25  iter: 1219  total_loss: 16.07  loss_ce: 0.0001175  loss_mask: 0.04386  loss_dice: 1.5  loss_ce_0: 0.2258  loss_mask_0: 0.05172  loss_dice_0: 1.498  loss_ce_1: 0.0002777  loss_mask_1: 0.05736  loss_dice_1: 1.644  loss_ce_2: 7.94e-05  loss_mask_2: 0.05223  loss_dice_2: 1.469  loss_ce_3: 8.573e-05  loss_mask_3: 0.06127  loss_dice_3: 1.617  loss_ce_4: 0.0001068  loss_mask_4: 0.04736  loss_dice_4: 1.576  loss_ce_5: 0.0001155  loss_mask_5: 0.05088  loss_dice_5: 1.395  loss_ce_6: 0.0001228  loss_mask_6: 0.04939  loss_dice_6: 1.498  loss_ce_7: 6.523e-05  loss_mask_7: 0.04935  loss_dice_7: 1.396  loss_ce_8: 9.398e-05  loss_mask_8: 0.05035  loss_dice_8: 1.539  time: 0.2658  data_time: 0.0049  lr: 0.0001  max_mem: 2369M
[32m[01/25 13:09:29 d2.utils.events]: [0m eta: 0:21:18  iter: 1239  total_loss: 17.48  loss_ce: 0.0001159  loss_mask: 0.05277  loss_dice: 1.635  loss_ce_0: 0.2152  loss_mask_0: 0.0545  loss_dice_0: 1.608  loss_ce_1: 0.0002458  loss_mask_1: 0.05719  loss_dice_1: 1.793  loss_ce_2: 7.282e-05  loss_mask_2: 0.06127  loss_dice_2: 1.685  loss_ce_3: 7.807e-05  loss_mask_3: 0.05349  loss_dice_3: 1.549  loss_ce_4: 8.906e-05  loss_mask_4: 0.05572  loss_dice_4: 1.6  loss_ce_5: 0.000104  loss_mask_5: 0.05265  loss_dice_5: 1.645  loss_ce_6: 0.0001097  loss_mask_6: 0.05235  loss_dice_6: 1.635  loss_ce_7: 5.751e-05  loss_mask_7: 0.05692  loss_dice_7: 1.561  loss_ce_8: 9.78e-05  loss_mask_8: 0.05237  loss_dice_8: 1.615  time: 0.2657  data_time: 0.0043  lr: 0.0001  max_mem: 2369M
[32m[01/25 13:09:35 d2.utils.events]: [0m eta: 0:21:16  iter: 1259  total_loss: 14.51  loss_ce: 0.000149  loss_mask: 0.06924  loss_dice: 1.541  loss_ce_0: 0.2059  loss_mask_0: 0.06414  loss_dice_0: 1.465  loss_ce_1: 0.0002295  loss_mask_1: 0.05956  loss_dice_1: 1.543  loss_ce_2: 6.866e-05  loss_mask_2: 0.06354  loss_dice_2: 1.361  loss_ce_3: 7.85e-05  loss_mask_3: 0.05095  loss_dice_3: 1.299  loss_ce_4: 9.468e-05  loss_mask_4: 0.06406  loss_dice_4: 1.347  loss_ce_5: 0.0001499  loss_mask_5: 0.06513  loss_dice_5: 1.314  loss_ce_6: 0.0001384  loss_mask_6: 0.06546  loss_dice_6: 1.436  loss_ce_7: 6.44e-05  loss_mask_7: 0.05895  loss_dice_7: 1.305  loss_ce_8: 0.0001388  loss_mask_8: 0.06101  loss_dice_8: 1.446  time: 0.2658  data_time: 0.0056  lr: 0.0001  max_mem: 2369M
[32m[01/25 13:09:40 d2.utils.events]: [0m eta: 0:21:14  iter: 1279  total_loss: 15.39  loss_ce: 0.0002268  loss_mask: 0.05095  loss_dice: 1.515  loss_ce_0: 0.1964  loss_mask_0: 0.05674  loss_dice_0: 1.358  loss_ce_1: 0.0002167  loss_mask_1: 0.04861  loss_dice_1: 1.364  loss_ce_2: 6.075e-05  loss_mask_2: 0.05663  loss_dice_2: 1.453  loss_ce_3: 7.122e-05  loss_mask_3: 0.04983  loss_dice_3: 1.506  loss_ce_4: 9.773e-05  loss_mask_4: 0.05262  loss_dice_4: 1.411  loss_ce_5: 0.0001089  loss_mask_5: 0.05693  loss_dice_5: 1.396  loss_ce_6: 0.000109  loss_mask_6: 0.04772  loss_dice_6: 1.455  loss_ce_7: 6.287e-05  loss_mask_7: 0.05221  loss_dice_7: 1.311  loss_ce_8: 0.000139  loss_mask_8: 0.05182  loss_dice_8: 1.417  time: 0.2658  data_time: 0.0053  lr: 0.0001  max_mem: 2369M
[32m[01/25 13:09:45 d2.utils.events]: [0m eta: 0:21:16  iter: 1299  total_loss: 15.63  loss_ce: 0.0002886  loss_mask: 0.05622  loss_dice: 1.603  loss_ce_0: 0.188  loss_mask_0: 0.06027  loss_dice_0: 1.564  loss_ce_1: 0.000198  loss_mask_1: 0.05509  loss_dice_1: 1.548  loss_ce_2: 5.032e-05  loss_mask_2: 0.05924  loss_dice_2: 1.559  loss_ce_3: 5.153e-05  loss_mask_3: 0.05447  loss_dice_3: 1.444  loss_ce_4: 7.155e-05  loss_mask_4: 0.06071  loss_dice_4: 1.444  loss_ce_5: 7.874e-05  loss_mask_5: 0.06066  loss_dice_5: 1.491  loss_ce_6: 9.935e-05  loss_mask_6: 0.06145  loss_dice_6: 1.521  loss_ce_7: 6.736e-05  loss_mask_7: 0.05909  loss_dice_7: 1.38  loss_ce_8: 0.0001587  loss_mask_8: 0.05504  loss_dice_8: 1.487  time: 0.2658  data_time: 0.0054  lr: 0.0001  max_mem: 2369M
[32m[01/25 13:09:51 d2.utils.events]: [0m eta: 0:21:12  iter: 1319  total_loss: 15.87  loss_ce: 0.0001471  loss_mask: 0.05698  loss_dice: 1.549  loss_ce_0: 0.1812  loss_mask_0: 0.05588  loss_dice_0: 1.402  loss_ce_1: 0.000178  loss_mask_1: 0.05194  loss_dice_1: 1.499  loss_ce_2: 4.44e-05  loss_mask_2: 0.05637  loss_dice_2: 1.477  loss_ce_3: 4.726e-05  loss_mask_3: 0.05129  loss_dice_3: 1.359  loss_ce_4: 5.608e-05  loss_mask_4: 0.048  loss_dice_4: 1.401  loss_ce_5: 5.918e-05  loss_mask_5: 0.05687  loss_dice_5: 1.393  loss_ce_6: 6.885e-05  loss_mask_6: 0.05439  loss_dice_6: 1.513  loss_ce_7: 4.909e-05  loss_mask_7: 0.04896  loss_dice_7: 1.435  loss_ce_8: 0.0001093  loss_mask_8: 0.05614  loss_dice_8: 1.374  time: 0.2658  data_time: 0.0053  lr: 0.0001  max_mem: 2369M
[32m[01/25 13:09:56 d2.utils.events]: [0m eta: 0:20:59  iter: 1339  total_loss: 16.71  loss_ce: 0.0001717  loss_mask: 0.05714  loss_dice: 1.609  loss_ce_0: 0.1732  loss_mask_0: 0.05755  loss_dice_0: 1.498  loss_ce_1: 0.0001673  loss_mask_1: 0.05304  loss_dice_1: 1.683  loss_ce_2: 4.274e-05  loss_mask_2: 0.05734  loss_dice_2: 1.506  loss_ce_3: 4.748e-05  loss_mask_3: 0.0605  loss_dice_3: 1.418  loss_ce_4: 4.906e-05  loss_mask_4: 0.05359  loss_dice_4: 1.543  loss_ce_5: 5.588e-05  loss_mask_5: 0.05941  loss_dice_5: 1.64  loss_ce_6: 6.01e-05  loss_mask_6: 0.06058  loss_dice_6: 1.534  loss_ce_7: 4.297e-05  loss_mask_7: 0.0613  loss_dice_7: 1.564  loss_ce_8: 0.0001161  loss_mask_8: 0.06191  loss_dice_8: 1.682  time: 0.2658  data_time: 0.0055  lr: 0.0001  max_mem: 2369M
[32m[01/25 13:10:01 d2.utils.events]: [0m eta: 0:20:54  iter: 1359  total_loss: 15.95  loss_ce: 0.0001533  loss_mask: 0.0595  loss_dice: 1.526  loss_ce_0: 0.1665  loss_mask_0: 0.05294  loss_dice_0: 1.435  loss_ce_1: 0.0001594  loss_mask_1: 0.06021  loss_dice_1: 1.571  loss_ce_2: 4.46e-05  loss_mask_2: 0.06115  loss_dice_2: 1.625  loss_ce_3: 6.362e-05  loss_mask_3: 0.04925  loss_dice_3: 1.485  loss_ce_4: 5.643e-05  loss_mask_4: 0.06353  loss_dice_4: 1.521  loss_ce_5: 5.674e-05  loss_mask_5: 0.05107  loss_dice_5: 1.519  loss_ce_6: 5.571e-05  loss_mask_6: 0.05143  loss_dice_6: 1.501  loss_ce_7: 3.742e-05  loss_mask_7: 0.05383  loss_dice_7: 1.538  loss_ce_8: 0.0001067  loss_mask_8: 0.05447  loss_dice_8: 1.457  time: 0.2657  data_time: 0.0045  lr: 0.0001  max_mem: 2369M
